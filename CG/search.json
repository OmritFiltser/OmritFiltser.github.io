[{"path":"index.html","id":"before-we-start","chapter":"ברוכים הבאים","heading":"ברוכים הבאים","text":"ספר זה נועד ללוות את הלומדים בקורס גאומטריה חישובית לתואר ראשון, המבוסס על הספר Computational Geometry: Algorithms Applications מאת\nMark de Berg, Otfried Cheong, Marc van Kreveld, Mark Overmars.","code":""},{"path":"index.html","id":"welcome","chapter":"ברוכים הבאים","heading":"לפני שמתחילים","text":"לפני שנתחיל, הנה מספר פרטים שכדאי לדעת:למי מיועד הקורס? תלמידים בשלב מתקדם בתואר הראשון, וכן תלמידי תואר שני, במתימטיקה ומדעי המחשב. הקורס מתאים למי שמעוניין להתנסות בתחום מחקר תיאורטי, וגם למי שמחפש בסיס תיאורטי לישומים מעשיים.למי מיועד הקורס? תלמידים בשלב מתקדם בתואר הראשון, וכן תלמידי תואר שני, במתימטיקה ומדעי המחשב. הקורס מתאים למי שמעוניין להתנסות בתחום מחקר תיאורטי, וגם למי שמחפש בסיס תיאורטי לישומים מעשיים.למה לי בכלל ללמוד גאומטריה חישובית? לאלגוריתמים ומבני הנתונים שנלמד יש אינספור יישומים מעשיים חשובים במגוון של תחומים רלוונטיים, כמו גרפיקה וראייה מומחשבת, מערכות מידע גאוגרפיות, ניתוח מידע רב, ועוד. תוכלו לרכוש לעצמכם אוסף של כלים, מודלים, וטכניקות, המוכנים לשליפה ומימוש במגוון של בעיות אלגוריתמיות. נוסף על כך, יש בהם גם יופי מרתק, שנמצא בתכונות הגיאומטריות, בהגדרה הנקיה של הבעיות, ובאופי האסתטי של הפתרונות. בקורס הזה נלמד בעיקר את הטכניקות והאלגוריתמים המהווים בסיס רעיוני למימושים נפוצים, אך גם נושאים הנמצאים בחזית המחקר היום.למה לי בכלל ללמוד גאומטריה חישובית? לאלגוריתמים ומבני הנתונים שנלמד יש אינספור יישומים מעשיים חשובים במגוון של תחומים רלוונטיים, כמו גרפיקה וראייה מומחשבת, מערכות מידע גאוגרפיות, ניתוח מידע רב, ועוד. תוכלו לרכוש לעצמכם אוסף של כלים, מודלים, וטכניקות, המוכנים לשליפה ומימוש במגוון של בעיות אלגוריתמיות. נוסף על כך, יש בהם גם יופי מרתק, שנמצא בתכונות הגיאומטריות, בהגדרה הנקיה של הבעיות, ובאופי האסתטי של הפתרונות. בקורס הזה נלמד בעיקר את הטכניקות והאלגוריתמים המהווים בסיס רעיוני למימושים נפוצים, אך גם נושאים הנמצאים בחזית המחקר היום.","code":""},{"path":"index.html","id":"אופן-הלימוד-בקורס","chapter":"ברוכים הבאים","heading":"אופן הלימוד בקורס","text":"מבנה הקורס: בקורס 12 יחידות, כל יחידה תתחיל בהצגה של בעיה חדשה (או אוסף חדש של בעיות), ולאחר מכן יוצגו הכלים (מבני נתונים, אלגוריתמים, מודלים) המתאימים לפתרון.מבנה הקורס: בקורס 12 יחידות, כל יחידה תתחיל בהצגה של בעיה חדשה (או אוסף חדש של בעיות), ולאחר מכן יוצגו הכלים (מבני נתונים, אלגוריתמים, מודלים) המתאימים לפתרון.ספרי הלימוד: הספר המרכזי של הקורס, אשר ישמש אותנו ביחידות 1-10, הוא Computational Geometry: Algorithms Applications.\nשני הפרקים האחרונים בקורס יבוססו על שני פרקים בספרGeometric Approximation Algorithms.ספרי הלימוד: הספר המרכזי של הקורס, אשר ישמש אותנו ביחידות 1-10, הוא Computational Geometry: Algorithms Applications.\nשני הפרקים האחרונים בקורס יבוססו על שני פרקים בספרGeometric Approximation Algorithms.ידע קודם: בקורס נדרש ידע בנושאים של סיבוכיות אסימפטוטית, אלגוריתמים ומבני נתונים בסיסיים.ידע קודם: בקורס נדרש ידע בנושאים של סיבוכיות אסימפטוטית, אלגוריתמים ומבני נתונים בסיסיים.שאלות עזר מנחות: במהלך כל אחת מיחידות הלימוד יופיעו שאלות הבנה פשוטות (ללא ציון), שיעזרו לכם לוודא שהבנתם באופן בסיסי את ההגדרות והרעיונות של הפרק.שאלות עזר מנחות: במהלך כל אחת מיחידות הלימוד יופיעו שאלות הבנה פשוטות (ללא ציון), שיעזרו לכם לוודא שהבנתם באופן בסיסי את ההגדרות והרעיונות של הפרק.יש נושא ספיציפי שמעניין אתכם? רוצים לראות דוגמאות נוספות? חומרי עזר לקריאה נוספת והעשרה ינתנו במקומות הרלוונטים. יש נושא ספיציפי שמעניין אתכם? רוצים לראות דוגמאות נוספות? חומרי עזר לקריאה נוספת והעשרה ינתנו במקומות הרלוונטים. מצאתם טעות בחומר הלימוד? אם מצאתם טעות או בעיה בחומר הלימוד – בין אם זו שגיאת כתיב, טעות בנוסחה, או חור בהוכחה - אנא כתבו לי.מצאתם טעות בחומר הלימוד? אם מצאתם טעות או בעיה בחומר הלימוד – בין אם זו שגיאת כתיב, טעות בנוסחה, או חור בהוכחה - אנא כתבו לי.","code":""},{"path":"intro.html","id":"intro","chapter":"יחידה 1 מבוא","heading":"יחידה 1 מבוא","text":"","code":""},{"path":"intro.html","id":"preface","chapter":"יחידה 1 מבוא","heading":"1.1 הקדמה","text":"","code":""},{"path":"intro.html","id":"what-is-cg","chapter":"יחידה 1 מבוא","heading":"1.1.1 מהי גאומטריה חישובית?","text":"גאומטריה חישובית היא תחום מחקר במדעי המחשב העוסק בפיתוח של כלים, מודלים, מבני נתונים, ואלגוריתמים, המיועדים לפתרון בעיות חישוב גאומטריות. המחקר התיאורטי בגאומטריה חישובית מיושם בתחומים רבים ומגוונים. בסרטון הבא נספר איך נולד התחום, ונציג מספר דוגמאות לבעיות שבהן נעסוק במהלך הקורס.","code":""},{"path":"intro.html","id":"צפו-בסרטון-הבא.","chapter":"יחידה 1 מבוא","heading":"צפו בסרטון הבא.","text":"\n\n\n","code":""},{"path":"intro.html","id":"מדדים-להערכת-טיב-הפתרון.","chapter":"יחידה 1 מבוא","heading":"מדדים להערכת טיב הפתרון.","text":"פתרון לבעיה יכול להיות בצורה של אלגוריתם, המקבל קלט ומייצר פלט מתאים. במקרה זה טיב הפתרון נמדד בזמן הריצה של האלגוריתם, ובסיבוכיות הזיכרון הנדרשת לפעולתו.כאשר הפתרון הוא בצורה של מבנה נתונים, קיים מדד נוסף, שהוא זמן העיבוד המקדים. לכן, בניתוח של מבנה נתונים נתייחס לכל אחד מהמדדים הבאים:זמן עיבוד מקדים (Preprocessing Time) - הזמן שלוקח לנו לעבד את הקלט ולבנות את מבנה הנתונים.זמן עיבוד מקדים (Preprocessing Time) - הזמן שלוקח לנו לעבד את הקלט ולבנות את מבנה הנתונים.סיבוכיות מקום/זיכרון (Storage Space) - גודל הזיכרון או נפח האחסון לו נזדקק עבור מבנה הנתונים.סיבוכיות מקום/זיכרון (Storage Space) - גודל הזיכרון או נפח האחסון לו נזדקק עבור מבנה הנתונים.זמן שאילתה (Query Time) - זמן הריצה של אלגוריתם השאילתה.זמן שאילתה (Query Time) - זמן הריצה של אלגוריתם השאילתה.","code":""},{"path":"intro.html","id":"קראו-את-ההקדמה-לפרק-1-בספר-הלימוד-עמודים-12.","chapter":"יחידה 1 מבוא","heading":"קראו את ההקדמה לפרק 1 בספר הלימוד (עמודים 1–2).","text":"","code":""},{"path":"intro.html","id":"תחומי-יישום.","chapter":"יחידה 1 מבוא","heading":"תחומי יישום.","text":"להרחבה על האפליקציות השונות והתפקיד שמשחקת בהן הגאומטריה החישובית, מומלץ לקרוא את פרק 1.3 בספר.","code":""},{"path":"intro.html","id":"basic-prop","chapter":"יחידה 1 מבוא","heading":"1.1.2 מאפיינים חשובים","text":"כמו בכל תחום מדעי, למחקר בגאומטריה חישובית יש מספר מאפיינים שהתקבעו כתוצאה מתחומי העניין והמומחיות של החוקרים בתחום. כאן נתאר את העיקריים שבהם.","code":""},{"path":"intro.html","id":"ריגורוזיות.","chapter":"יחידה 1 מבוא","heading":"ריגורוזיות.","text":"לפני שהתפתח המחקר בגאומטריה חישובית, היו המון היוריסטיקות ופתרונות אד הוק ליישומים גאומטרים. פתרונות כאלה נבדקו על ידי ביצוע ניסויים, ולכן היו בדרך כלל יעילים רק במצבים מסוימים, ולעיתים אף שגויים לחלוטין. לעומת זאת, תחום הגאומטריה החישובית התפתח כתחום מתמטי שבו הגישה לפתרון היא ריגורוזית: הבעיות מוגדרות היטב, וכל פתרון כולל הוכחת יעילות ונכונות מתמטית.","code":""},{"path":"intro.html","id":"מימד-נמוך.","chapter":"יחידה 1 מבוא","heading":"מימד נמוך.","text":"היסטורית, הגאומטריה החישובית התפתחה כתחום מחקר העוסק בבעיות על מרחבים ממימד אוקלידי נמוך (לרוב מרחב דו-מימדי, ולעיתים גם תלת מימדי). לכן לאורך הקורס אנו נתמקד בעיקר במרחב אוקלידי הדו-מימדי, \\(\\mathbb{R}^2\\) , שמכונה גם המישור האוקלידי (או בקיצור, המישור). רוב האלגוריתמים שנראה יעבדו רק בשניים או שלושה מימדים. אלגוריתמים שמתאימים גם למימדים גבוהים יותר סובלים במקרים רבים מתופעה שנקראת “קללת המימד הגבוה” (curse high dimensionality), כלומר, זמן הריצה שלהם כולל פקטורים שגדלים אקספוננצילית במימד. עם זאת, לעיתים נדון גם באפשרות להרחבה למימדים גבוהים יותר, או בהבדלים הקיימים במעבר למימד גבוה יותר.","code":""},{"path":"intro.html","id":"קלט-בדיד-דיסקרטי.","chapter":"יחידה 1 מבוא","heading":"קלט בדיד (דיסקרטי).","text":"תחום הגאומטריה החישובית מתמקד בבעיות בהן האובייקטים הנתונים הם בדידים בטבעם, למשל קבוצות סופיות של נקודות, ישרים, או מעגלים. קיימות אפליקציות רבות בהן האובייקטים הם רציפים, כמו למשל מרחב תלת מימדי המתאר את טמפרטורת האוויר באיזור מסוים. מכיוון שהחישוב בעזרת מחשב הוא בדיד בטבעו, במקרים כאלו נדרש תהליך של דיסקרטיזציה, המאפשר לקבל קירוב לפתרון הרציף. בקורס הזה נדבר על בעיות עם קלט בדיד, ולא נדון בתהליך הדיסקרטיזציה.","code":""},{"path":"intro.html","id":"המודל-החישובי.","chapter":"יחידה 1 מבוא","heading":"המודל החישובי.","text":"לפני שניגשים לניתוח יעילות של אלגוריתם, צריך להחליט באיזה מודל חישובי הוא פועל. המודל החישובי מגדיר את הקשר בין הקלט ופעולות האלגוריתם לבין ייצוגם ואופן חישובם במחשב. בתחום הגאומטריה החישובית מקובל להשתמש במודל מתמטי הנקרא מודל RAM הממשי (real RAM). זהו מודל המבוסס על המודל המוכר של Random Access Machine, כלומר הגישה לתאי הזיכרון היא באמצעות מצביעים. אלגוריתמים לבעיות גאומטריות דורשים בדרך כלל חישובים על מספרים ממשיים, וכאשר מתרגמים אלגוריתמים אלו לתוכניות מחשב, המספרים המחושבים הם בעצם מקורבים, כתלות בדיוק המחשב. מודל זה מאפשר להזניח את בעיית שגיאות העיגול בייצוג המקורב של הממשיים: כל מספר ממשי ניתן לאחסון ביחידת זיכרון אחת, והמספרים הם מדויקים ולא מקורבים. כמו כן המודל מניח שהפעולות האריתמטיות (חיבור, חיסור, כפל, וחילוק), וכן פעולות השוואה, מתבצעות בזמן קבוע על מספרים ממשיים.על אף כוחו הבלתי רגיל של מודל RAM הממשי, קיימות מספר שפות תכנות המיועדות למימוש אלגוריתמים גאומטריים ומאפשרות סימולציה שלו. הרעיון בסימולציה כזו הוא שרמת הדיוק בחישוב וייצוג המספרים משתנה בהתאם לצרכי האלגוריתם, כך שניתן יהיה לבצע השוואות מדויקות ולהימנע מטעויות עיגול. לדוגמה, הספריה CGAL תומכת בחישובים גאומטריים מדוייקים באמצעות מנגנון מסוג זה.","code":""},{"path":"intro.html","id":"more-tools","chapter":"יחידה 1 מבוא","heading":"1.2 כלים ומקורות נוספים","text":"בסעיף זה ירוכזו כלים שימושיים לקורס, ומקורות נוספים ללמידה והעשרה.","code":""},{"path":"intro.html","id":"כלים-מומלצים-לשימוש-בקורס.","chapter":"יחידה 1 מבוא","heading":"כלים מומלצים לשימוש בקורס.","text":"Ipe- כלי חינמי מצוין לציורים גאומטריים שפותח ע”י Otfried Cheong, חוקר בגאומטריה חישובית. מדריך מצוין לכלי זה ניתן למצוא כאן.Geogebra- כלי ליצירת אובייקטים גאומטריים אינטראקטיביים.CGAL - ספריית C++ המכילה מגוון של אלגוריתמים ומבני נתונים גאומטריים.","code":""},{"path":"intro.html","id":"הרצאות-מוקלטות-וחומרי-לימוד-נוספים","chapter":"יחידה 1 מבוא","heading":"הרצאות מוקלטות וחומרי לימוד נוספים","text":"למעוניינים בכך, ניתן למצוא חומרי לימוד מצויינים מקורסים דומים הניתנים ברחבי העולם. הנה רשימה חלקית ביותר של הבולטים שבהם:CMSC 754 Computational Geometry, David M. Mount.Geometry: Combinatorics Algorithms, Luis Barba Bernd Gärtner, Michael Hoffmann Emo Welzl.Computational Geometry, video lectures Philipp Kindermann.","code":""},{"path":"intro.html","id":"notations","chapter":"יחידה 1 מבוא","heading":"1.3 מושגי יסוד","text":"","code":""},{"path":"intro.html","id":"basic-objects","chapter":"יחידה 1 מבוא","heading":"1.3.1 אובייקטים גאומטריים בסיסיים","text":"בחלק זה מופיעה רשימה של הגדרות בסיסיות איתן נעבוד. גם אם אתם כבר מכירים את כולן או את רובן, מומלץ בכל זאת לקרוא את הפרק כדי לודא שאתם מבינים את הניסוח המתמטי שבו נשתמש בקורס. תוכלו לחזור לפרק זה בכל עת, אם תרצו להיזכר באחת מההגדרות.","code":""},{"path":"intro.html","id":"מרחב-אוקלידי-נקודה-נורמה-ומרחק","chapter":"יחידה 1 מבוא","heading":"מרחב אוקלידי, נקודה, נורמה ומרחק","text":"","code":""},{"path":"intro.html","id":"curves-polygons","chapter":"יחידה 1 מבוא","heading":"1.3.2 עקומים ופוליגונים","text":"","code":""},{"path":"intro.html","id":"special-polygons","chapter":"יחידה 1 מבוא","heading":"1.3.3 פוליגונים מיוחדים","text":"","code":""},{"path":"intro.html","id":"convex-hull","chapter":"יחידה 1 מבוא","heading":"1.4 הקמור של קבוצת נקודות במישור","text":"","code":""},{"path":"intro.html","id":"convex-hull-def","chapter":"יחידה 1 מבוא","heading":"1.4.1 הגדרת הקמור","text":"הדוגמה הראשונה לבעיה גאומטרית שנלמד בקורס היא בעיית חישוב הקמור. הקמור של קבוצת נקודות הוא מושג בסיסי וחשוב ביותר, מכיוון שיש לו אינספור שימושים בתחומים שונים ומגוונים. בסרטון הבא נגדיר מהו הקמור של קבוצת נקודות, ונציג דוגמה אחת לשימוש בו - דווקא בבעיה שבמבט ראשון אין לה קשר לגאומטריה, ובהמשך נראה איך בכל זאת הגאומטריה תעזור לנו בפתרון הבעיה.","code":""},{"path":"intro.html","id":"צפו-בסרטון-הבא.-1","chapter":"יחידה 1 מבוא","heading":"צפו בסרטון הבא.","text":"\n\n\nהגדרה: קבוצה קמורהקבוצת נקודות \\(S\\) היא קבוצה קמורה אם לכל זוג נקודות \\(p,q\\S\\) מתקיים שהקטע \\(pq\\) מוכל בקבוצה \\(S\\).הגדרה: הקמורעבור קבוצת נקודות \\(S\\), הקמור (Convex Hull) של S מסומן \\(CH(S)\\).לקמור של קבוצת נקודות יש מספר הגדרות שקולות:הקמור של קבוצת נקודות \\(S\\) הוא הקבוצה הקמורה הקטנה ביותר שמכילה את \\(S\\). (כלומר, לא קיימת קבוצה קמורה שמכילה את \\(S\\) ומוכלת ממש בקמור של \\(S\\)).הקמור של קבוצת נקודות \\(S\\) הוא הקבוצה הקמורה הקטנה ביותר שמכילה את \\(S\\). (כלומר, לא קיימת קבוצה קמורה שמכילה את \\(S\\) ומוכלת ממש בקמור של \\(S\\)).הקמור של קבוצת נקודות \\(S\\) הוא הפוליגון הקמור היחיד שקודקודיו הם נקודות מ-\\(S\\) ושמכיל את \\(S\\).הקמור של קבוצת נקודות \\(S\\) הוא הפוליגון הקמור היחיד שקודקודיו הם נקודות מ-\\(S\\) ושמכיל את \\(S\\).הקמור של קבוצת נקודות \\(S\\) הוא החיתוך של כל חצאי המרחבים הסגורים שמכילים את \\(S\\).הקמור של קבוצת נקודות \\(S\\) הוא החיתוך של כל חצאי המרחבים הסגורים שמכילים את \\(S\\).","code":""},{"path":"intro.html","id":"naive-alg","chapter":"יחידה 1 מבוא","heading":"1.4.2 אלגוריתם נאיבי","text":"בחלק הראשון של סעיף 1.1 בספר הלימוד מופיעות הגדרות הקמור שראינו קודם, וכן מתואר האלגוריתם SlowConvexHull, שהוא אלגוריתם נאיבי. סיבוכיות זמן הריצה שלו היא \\(O(n^3)\\), והיא רחוקה מלהיות אופטימלית, אך הוא אינטואיטיבי ונכונותו נובעת ישירות מהאבחנות שעשינו קודם על התכונות הגאומטריות של הקמור.באלגוריתם זה עולה הנושא של מצבים מנוונים (degeneracies), אלו הם למעשה מקרי קצה של הקלט שיש לקחת בחשבון. בנוסף, באלגוריתם עולה גם בעיה של עמידות החישוב (robustness), כלומר במצבים מסוימים של טעויות עיגול בחישובים עם נקודה צפה (floating point), יתכן שהאלגוריתם אפילו לא יחזיר פוליגון. בחלק הרביעי של יחידה זו תוכלו לקרוא עוד על עמידות החישוב ומצבים מנוונים.","code":""},{"path":"intro.html","id":"קראו-את-חלקו-הראשון-של-סעיף-1.1-בספר-הלימוד-עמודים-25","chapter":"יחידה 1 מבוא","heading":"קראו את חלקו הראשון של סעיף 1.1 בספר הלימוד (עמודים 2–5)","text":"","code":""},{"path":"intro.html","id":"incremental-alg","chapter":"יחידה 1 מבוא","heading":"1.4.3 אלגוריתם אינקרמנטלי","text":"בסרטון הבא נתאר את האלגוריתם ConvexHull המופיע בחלקו השני של סעיף 1.1 בספר הלימוד. האלגוריתם הזה נקרא גם האלגוריתם האינקרמנטלי, או סריקת גרהם (Graham Scan). הוא מתוחכם יותר, וסיבוכיות זמן הריצה שלו היא  - זמן כמעט לינארי. זהו שיפור משמעותי מאוד לעומת האלגוריתם הנאיבי שראינו בחלק הקודם. ","code":""},{"path":"intro.html","id":"צפו-בסרטון-הבא","chapter":"יחידה 1 מבוא","heading":"צפו בסרטון הבא:","text":"\n\n\n","code":""},{"path":"intro.html","id":"קראו-את-חלקו-השני-של-סעיף-1.1-בספר-הלימוד-עמודים-68.","chapter":"יחידה 1 מבוא","heading":"קראו את חלקו השני של סעיף 1.1 בספר הלימוד (עמודים 6–8).","text":"","code":""},{"path":"intro.html","id":"output-sens","chapter":"יחידה 1 מבוא","heading":"1.4.4 אלגוריתם רגיש לפלט","text":"האם ניתן לשפר את זמן הריצה של האלגוריתם האינקרמנטלי שראינו קודם? בסרטון הבא נתאר  אלגוריתם נוסף לחישוב הקמור, שנקרא אלגוריתם עטיפת המתנה (Gift Wrapping) או Jarvis’s March. זמן הריצה שלו הוא, כאשר  הוא מספר קודקודי הקמור. סוג כזה של אלגוריתם נקרא output sensitive, כלומר אלגוריתם שזמן הריצה שלו תלוי בגודל הפלט.","code":""},{"path":"intro.html","id":"צפו-בסרטון-הבא.-2","chapter":"יחידה 1 מבוא","heading":"צפו בסרטון הבא.","text":"\n\n\n","code":""},{"path":"intro.html","id":"deg-robust","chapter":"יחידה 1 מבוא","heading":"1.5 מצבים מנוונים ועמידות החישוב","text":"על מנת לפשט את התיאור של אלגוריתמים גאומטריים, במקרים רבים משתמשים בהנחה שנקראת מצב כללי (general position). המשמעות היא שהקלט אינו מכיל מצבים “מנוונים” (degenerate), למשל, שתי נקודות עם אותה קואורדינטת \\(x\\), שלוש נקודות על ישר אחד, או ארבע נקודות על מעגל. המטרה היא להימנע מסרבול האלגוריתם כאשר יש צורך בטיפול במקרי קצה. לדוגמה, באלגוריתם האינקרמטלי לחישוב הקמור (סריקת גרהם), יש למיין את הנקודות לפי קואורדינטת ה-\\(x\\) שלהן. אך מה עושים אם יש שתי נקודות בעלות אותה קואורדינטת \\(x\\)? נצטרך להחליט מי מהן תופיע ראשונה במיון. אמנם כאן נוכל להוסיף תיאור פשוט יחסית, אך יותר קל להניח שהקלט נמצא במצב כללי, כלומר נניח שאין שתי נקודות בעלות אותה קואורדינטת x. הנחות מסוג זה הן מקובלות באלגוריתמים גאומטריים, ומשתנות בהתאם לצרכי האלגוריתם.מצבים מנוונים קשורים בנושא עמידות החישוב (robustness), מכיוון שלעיתים הטיפול בהם כרוך בבדיקה הגוררת חישוב שתוצאתו היא אפס. לדוגמה, במימוש אלגוריתם האינקרמנטלי, אנו נדרשים לבדוק האם שלושת הנקודות האחרונות יוצרות פניה ימינה. כלומר, בהינתן שלוש נקודות, \\(p_1, p_2, p_3\\), נרצה לבדוק האם הזוית שהן יוצרות, כלומר הזוית \\(\\alpha = \\angle p_1 p_2 p_3\\), קטנה מ- \\(180^\\circ\\). ניתן לעשות זאת על ידי חישוב של הישר העובר דרך \\(p_1 p_2\\) ובדיקה האם \\(p_3\\) נמצאת מעליו או מתחתיו, או על ידי מכפלה וקטורית כפי שנראה בפרק הבא. אם שלושת הנקודות נמצאות על ישר אחד, נקבל שיוויון, כלומר \\(\\alpha= 180^\\circ\\). כאשר מבצעים חישוב של מספרים ממשיים במחשב, התוצאה תלויה ברמת הדיוק של המחשב, אשר אינה אינסופית, ולכן בדרך כלל לא נקבל מצב של שיוויון מדויק. לכן, אם שלושת הנקודות נמצאות כמעט על אותו ישר, אי דיוק מזערי בחישוב עלול להביא לתוצאה שגויה, מה שמעלה את השאלה של נכונות האלגוריתם במצבים כגון זה, וזוהי בעצם השאלה של עמידות החישוב.","code":""},{"path":"intro.html","id":"קראו-את-סעיף-1.2-בספר-עמודים-810.","chapter":"יחידה 1 מבוא","heading":"קראו את סעיף 1.2 בספר (עמודים 8–10).","text":"","code":""},{"path":"map-overlay.html","id":"map-overlay","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","text":"","code":""},{"path":"map-overlay.html","id":"preface","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"2.1 הקדמה","text":"","code":""},{"path":"map-overlay.html","id":"them-map","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"2.1.1 שכבות מידע במפה","text":"תחילה נראה כיצד ניתן למצוא את כל החיתוכים באוסף קטעים נתון, ולשם כך\nנשתמש בטכניקה חשובה שימושית מאוד: טכניקת הישר הסורק (sweep-line). לאחר\nמכן נדבר על ייצוג של מפות מישוריות (גרפים מישוריים), ונתאר מבנה נתונים\nיעיל לאחסונם - DCEL. לבסוף, נראה כיצד ניתן לאחד שני מבנים כאלה, המייצגים\nשתי מפות מישוריות, למפה מישורית אחת המאגדת את כל המידע.","code":""},{"path":"map-overlay.html","id":"קראו-את-ההקדמה-לפרק-2-עמודים-1920.","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"קראו את ההקדמה לפרק 2 (עמודים 19–20).","text":"","code":""},{"path":"map-overlay.html","id":"sweep-line","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"2.2 טכניקת הישר הסורק","text":"","code":""},{"path":"map-overlay.html","id":"line-int","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"2.2.1 חיתוך קטעים במישור","text":"טכניקת הישר הסורק (sweep-line) היא חשובה ושימושית מאוד בגאומטריה\nחישובית. כדי להדגים את השימוש בטכניקה הזו, ולפני שנדבר על מפות מישוריות,\nנציג בעיה פשוטה לכאורה שנקראת בעיית חיתוך קטעים במישור (line segment\nintersection). בבעיה זו, הקלט הוא אוסף של קטעים במישור, והמטרה היא למצוא\nאת כל נקודות החיתוך בין קטעים. בסרטון הבא נתאר את רעיון השימוש בישר\nהסורק עבור בעיית חיתוך קטעים במישור.","code":""},{"path":"map-overlay.html","id":"צפו-בסרטון-הבא-1","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"צפו בסרטון הבא:","text":"\n\n\nבטכניקת הישר הסורק, הרעיון הוא “לסרוק” את הקטעים בעזרת ישר אופקי \\(\\ell\\)\nהנע מלעלה למטה. ה”סטטוס” (status) של הישר הוא אוסף הקטעים הנחתכים עם\nהישר במיקומו הנוכחי. את הסטטוס יש לעדכן בזמן שהישר נע מטה, אך הוא אינו\nמתעדכן באופן רציף - העדכון מתבצע רק כאשר הישר מגיע לנקודות מסויימות, להן\nאנו קוראים “מאורעות” (event points). בבעיית חיתוך הקטעים, המאורעות\nהם נקודות הקצה של הקטעים, וגם נקודות החיתוך עצמן, שמתגלות במהלך\nהאלגוריתם. בכל פעם שהישר מגיע למאורע, יש לעדכן את הסטטוס ואת תור\nהמאורעות, ולבצע בדיקות של חיתוכים בין הקטעים בסטטוס.\nזמן הריצה של האלגוריתם הראשון שמתואר בסרטון ומשתמש בשיטת הישר הסורק, הוא\n\\(O(n^2)\\). האם קיים אוסף של קטעים ללא נקודות חיתוך כלל, שעבורו זמן הריצה\nשל האלגוריתם הזה יהיה \\(\\Theta(n^2)\\)?באוסף הקטעים שבאיור למטה אין נקודות חיתוך, אך בשלב שבו הקטע ה- \\(\\) נוסף\nלסטטוס, כבר מופיעים בסטטוס \\(-1\\) הקטעים הראשונים, ולכן יהיו \\(-1\\)\nבדיקות. סך הכל מספר הבדיקות בכל השלבים יהיה \\(\\Theta(n^2)\\).\n","code":""},{"path":"map-overlay.html","id":"line-sweep-impl","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"2.2.2 טכניקת הישר הסורק - מימוש","text":"בסעיף הקודם ראינו סקיצה של אלגוריתם המשתמש בטכניקת הישר הסורק, והסברנו\nבאופן אינטואיטיבי מדוע גישה כזו תתן לנו אלגוריתם יעיל שהוא רגיש לפלט,\nושאינו בודק חיתוכים בין כל זוג קטעים.כיצד מממשים אלגוריתם כזה ביעילות? בסעיף 2.1 בספר הלימוד מתואר בפירוט\nהאלגוריתם FindIntersections, מבני הנתונים להם נזדקק עבור תור המאורעות\nוהסטטוס, והפרוצדורה HandleEvenPoint לטיפול במאורעות. זמן הריצה של\nהאלגוריתם הוא \\(O((n+k)\\log n)\\), כאשר \\(k\\) הוא מספר נקודות החיתוך.","code":""},{"path":"map-overlay.html","id":"קראו-בעיון-את-סעיף-2.1-בספר-הלימוד-עמודים-2029","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"קראו בעיון את סעיף 2.1 בספר הלימוד (עמודים 20–29)","text":"","code":""},{"path":"map-overlay.html","id":"euiler","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"נוסחת אוילר","text":"בסעיף 2.1 בספר הלימוד, יש שימוש בנוסחת אוילר להשגת חסם על מספר המאורעות.עבור גרף מישורי עם \\(n_v\\) קודקודים, \\(n_e\\) צלעות, ו-\\(n_f\\) פאות, נוסחת\nאוילר מתארת את הקשר ביניהם, באופן הבא.נוסחת אוילר: \\(n_v-n_e+n_f\\ge 2\\).זוהי נוסחה חשובה ביותר, ונעשה בה שימוש גם בהמשך הקורס.","code":""},{"path":"map-overlay.html","id":"check-line-int","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"2.2.3 כיצד נבדוק האם זוג קטעים נחתכים?","text":"במהלך האלגוריתם הסורק שראינו קודם, אנו נדרשים למצוא את נקודת החיתוך בין\nשני קטעים נתונים. בהינתן שני קטעים, \\(S=\\overline{pq}\\) ו-\n\\(S'=\\overline{p'q'}\\), כיצד נבדוק האם הם נחתכים?\n","code":""},{"path":"map-overlay.html","id":"גישה-ראשונה-חישוב-הישרים-המכילים-את-הקטעים","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"גישה ראשונה: חישוב הישרים המכילים את הקטעים","text":"ישר המכיל קטע.נחשב את הישר \\(\\ell\\) המכיל את הקטע \\(S\\), ואת הישר \\(\\ell'\\)\nהמכיל את הקטע \\(S'\\). נחשב את נקודת החיתוך \\(t\\) בין הישרים \\(\\ell\\)\nו-\\(\\ell'\\). נבדוק האם \\(t\\) שייכת לשני הקטעים \\(S\\) ו-\\(S'\\). בשיטה זו אנו\nמוצאים את נקודת החיתוך, אם היא קיימת.","code":""},{"path":"map-overlay.html","id":"מציאת-הישר-המכיל-קטע","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"מציאת הישר המכיל קטע:","text":"מציבים את שתי נקודות הקצה של הקטע במשוואת הישר \\(y=m x + c\\), ולאחר מכן\nפותרים מערכת של שתי משוואות כדי למצוא את \\(m\\).למשל, עבור הקטע \\(\\overline{pq}\\) נסמן \\(p=(p_x,p_y)\\), \\(q=(q_x,q_y)\\), ונקבל\n\\(m=\\frac{q_y-p_y}{q_x-p_x}\\).לאחר מכן, מוצאים את \\(c\\) על ידי הצבה של אחת מהנקודות במשוואה.שימו לב שאם הקטע \\(\\overline{p q}\\) הוא אנכי, אז המכנה של \\(m\\) מתאפס.","code":""},{"path":"map-overlay.html","id":"מציאת-נקודת-החיתוך-בין-שני-ישרים","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"מציאת נקודת החיתוך בין שני ישרים:","text":"בהינתן שני ישרים לא אנכיים,\\(\\ell: y= m x + c\\) ו-\\(\\ell': y= m'x+ c'\\),\nנציב את נקודת החיתוך \\(t=(t_x,t_y)\\) בשתי המשוואות. נפתור ונקבל:\n\\(t_x=\\frac{c-c'}{m'-m}\\), \\(t_y=\\frac{cm'-c'm}{m'-m}\\).גם כאן נשים לב שהמכנה מתאפס אם הישרים אנכיים או מקבילים.","code":""},{"path":"map-overlay.html","id":"בדיקה-האם-נקודת-החיתוך-שייכת-לקטע","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"בדיקה האם נקודת החיתוך שייכת לקטע:","text":"נניח שמתקיים \\(p_x\\le q_x\\), \\(p_y\\le q_y\\). אז נקודת החיתוך \\(t\\) שייכת לקטע\n\\(\\overline{p q}\\) אם \\(t_x\\[p_x, q_y]\\), \\(t_y\\[p_y, q_y]\\).בדוגמה המופיעה כאן, הקטעים אינם נחתכים, אך נקודת החיתוך בין הישרים\nהמכילים אותם מופיעה על אחד הקטעים.\n","code":""},{"path":"map-overlay.html","id":"כיצד-מטפלים-במקרים-מיוחדים","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"כיצד מטפלים במקרים מיוחדים?","text":"שימו לב שבגישה הראשונה התעלמנו ממספר מצבים מיוחדים של הקלט, למשל כאשר\nהקטעים הם אנכיים. נסו לבדוק בעצמכם מהם מצבי הקלט מהם אנחנו מתעלמים,\nוחישבו כיצד ניתן לטפל בהם.ביחידה הראשונה של הקורס דנו בנושא של מצבים מנוונים. ראינו שניתן לטפל\nבמצבים מנוונים על ידי חלוקה למקרים נפרדים, אך חלוקה כזו היא בדרך כלל\nמתישה ומועדת לטעויות. דרך נוספת לטיפול במצבים כאלו היא למצוא מערכת\nגאומטרית אחרת בה המקרים ההמיוחדים נעלמים, למשל על ידי סיבוב מערכת\nהצירים, אך פעולה זו לא תמיד אפשרית. אפשרות אחרת היא להשתמש בהנחת מצב\nכללי: מניחים שהקלט אינו מכיל מצבים מנוונים.במקרה של חיתוך ישרים, ניתן למצוא פתרון אחר שבו המקרים המיוחדים אינם\nדורשים טיפול נפרד, כמו בגישה הבאה.","code":""},{"path":"map-overlay.html","id":"גישה-שניה-חישוב-דטרמיננטה","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"גישה שניה: חישוב דטרמיננטה","text":"אבחנה:\nהקטעים \\(S\\) ו-\\(S'\\) חותכים זה את זה אם ורק אם הישר \\(\\ell\\) שמכיל את \\(S\\)\n“מפריד” בין הנקודות \\(p'\\) ו-\\(q'\\) , והישר \\(\\ell'\\) שמכיל את \\(S'\\) “מפריד”\nבין הנקודות \\(p\\) ו-\\(q\\).כיצד נבדוק האם ישר מפריד בין שתי נקודות? נוכל להמיר את הבעיה הזו\nלבעיה הבאה: בהינתן 3 נקודות, \\(,b,c\\), נרצה לדעת האם כאשר נעים מ-\\(\\)\nל-\\(b\\) ואחר כך ל-\\(c\\) מבצעים פניה ימינה, שמאלה, או שממשיכים באותו הכיוון.\nלשם כך נחשב את הדטרמיננטה הבאה:\n\\(det\\begin{bmatrix}a_x&a_y&1\\\\b_x&b_y&1\\\\c_x&c_y&1\\end{bmatrix}=a_xb_y+a_yc_x+b_xc_y-a_yb_x-a_xc_y-b_yc_x\\)הערך המוחלט של הדטרמיננטה הזו שווה בדיוק לפעמיים שטח המשולש\n\\(\\triangle b c\\).ערכה חיובי אם פונים שמאלה ב-\\(b\\), שלילי אם פונים ימינה ב-\\(b\\), ו-0 אם\nממשיכים באותו הכיוון. לכן, בשיטה זו\nנוכל לבדוק האם הנקודות \\(p'\\) ו-\\(q'\\) נמצאות בשני צדדים שונים של הישר\n\\(\\ell\\) המכיל את \\(\\overline{pq}\\), על ידי חישוב של שתי הדטרמיננטות\nהמתאימות. לאחר מכן נוכל לבדוק האם הנקודות \\(p\\) ו-\\(q\\) נמצאות בשני צדדים\nשונים של הישר \\(\\ell'\\) המכיל את \\(\\overline{p'q'}\\).","code":""},{"path":"map-overlay.html","id":"dcel","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"2.3 מבנה DCEL","text":"","code":""},{"path":"map-overlay.html","id":"plan-map","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"2.3.1 יצוג של מפה מישורית","text":"","code":""},{"path":"map-overlay.html","id":"צפו-בסרטון-הבא-2","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"צפו בסרטון הבא:","text":"\n\n\n","code":""},{"path":"map-overlay.html","id":"קראו-את-סעיף-2.2-בספר-עמודים-2933","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"קראו את סעיף 2.2 בספר (עמודים 29–33)","text":"","code":""},{"path":"map-overlay.html","id":"problem-def","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"2.3.2 בעיית map overlay","text":"לאחר שראינו כיצד ניתן לייצג מפה מישורית, בחלק זה נראה כיצד ניתן לחשב את\nה-overlay של שתי מפות מישוריות. ה-overlay הוא הייצוג המאוחד של שתי שכבות\nמפה כאשר הן מונחות זו על גבי זו.בהינתן שתי מפות \\(\\mathcal{S_1}\\) ו-\\(\\mathcal{S_2}\\) המיוצגות על ידי מבני\nDCEL, נרצה לחשב מבנה DCEL עבור ה-overlay של \\(\\mathcal{S_1}\\) ו-\n\\(\\mathcal{S_1}\\), שמסומן \\(\\mathcal{O}=(\\mathcal{S_1},\\mathcal{S_2})\\).\nה-overlay הוא מפה מישורית, שבה לכל זוג פאות \\(f_1\\) מ-\\(\\mathcal{S_1}\\)\nו-\\(f_2\\) מ-\\(\\mathcal{S_2}\\) שהחיתוך שלהן לא ריק, קיימת פאה \\(f\\) שהיא בדיוק\nאחד מרכיבי הקשירות של \\(f_1\\cap f_2\\). (שימו לב ש-\\(f_1\\) או \\(f_2\\) יכולות\nלהיות הפאה החיצונית שאינה חסומה). בנוסף, נרצה לסמן את הפאה \\(f\\) בסימונים\nשל הפאות \\(f_1\\) ו-\\(f_2\\), כמו בדוגמה הבאה:\nבפרק 2.3 של ספר הלימוד מתואר אלגוריתם MapOverlay, המחשב את\n\\(\\mathcal{O}=(\\mathcal{S_1},\\mathcal{S_2})\\) בשיטת הישר הסורק שראינו\nקודם.","code":""},{"path":"map-overlay.html","id":"קראו-את-סעיף-2.3-בספר-עמודים-3339","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"קראו את סעיף 2.3 בספר (עמודים 33–39)","text":"","code":""},{"path":"map-overlay.html","id":"bool-op","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"2.3.3 פעולות בוליאניות","text":"אלגוריתם MapOverlay הוא כלי חזק ושימושי במגוון של בעיות. בסעיף 2.4 של\nספר הלימוד מופיעה דוגמה אחת לכך: חישוב של פעולות בוליאניות על שני\nפוליגונים. בהינתן שני פוליגונים \\(P_1,P_2\\), האלגוריתם מאפשר לנו לחשב את\nהאיחוד, החיתוך, וההפרש שלהם. הרעיון הוא שלאחר חישוב ה-overlay, לכל פאה\nבייצוג המאוחד יש תווית שקובעת האם פאה זו שייכת ל-\\(P_1\\), ל-\\(P_2\\), או\nלשניהם. לכן בעזרת התוויות נוכל להחליט עבור כל פאה האם היא נמצאת באיחוד,\nבחיתוך, או בהפרש.","code":""},{"path":"map-overlay.html","id":"קראו-את-סעיף-2.4-בספר-הלימוד-עמודים-3940","chapter":"יחידה 2 מפות מישוריות וטכניקת הישר הסורק","heading":"קראו את סעיף 2.4 בספר הלימוד (עמודים 39–40)","text":"","code":""},{"path":"pol-tringle.html","id":"pol-tringle","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","text":"","code":""},{"path":"pol-tringle.html","id":"preface","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.1 הקדמה","text":"","code":""},{"path":"pol-tringle.html","id":"agp","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.1.1 בעיית הגלריה לאמנות","text":"אם כן, כמה מצלמות נצטרך להציב על מנת לשמור על כל הגלריה? והיכן נצטרך להציב אותן? בעייה זו היתה ההשראה לאחת הבעיות המפורסמות והמרתקות ביותר בתחום הגיאומטריה החישובית: בעיית הגלריה לאמנות.","code":""},{"path":"pol-tringle.html","id":"קראו-את-ההקדמה-לפרק-3-בספר-הלימוד-עמוד-45.","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"קראו את ההקדמה לפרק 3 בספר הלימוד (עמוד 45).","text":"","code":""},{"path":"pol-tringle.html","id":"geom-model","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.1.2 מודל גאומטרי לבעיה","text":"בעית הגלריה לאמנות נוסחה ב-1973 על-ידי המתמטיקאי ויקטור קלי.מנקודת מבט גיאומטרית, נוכל לתאר גלריה בעלת \\(n\\) קירות בעזרת פוליגון פשוט \\(P\\) בעל \\(n\\) צלעות (וכמובן גם \\(n\\) קודקודים), ואת מיקומי המצלמות בתור נקודות בתוך \\(P\\). נניח שמצלמה יכולה לצלם כל נקודה בגלריה שאינה מוסתרת ממנה על-ידי אחד הקירות. במילים אחרות, מצלמה (נקודה) \\(g\\) שומרת על נקודה \\(p\\P\\) אם הקטע \\(\\overline{pq}\\) מוכל בתוך \\(P\\) (הפנים והשפה של \\(P\\)).באיור למטה מתואר פוליגון עם מצלמה יחידה בתוכו, והאיזור המוצלל הוא כל הנקודות שמצלמה זו שומרת עליהן, או “רואה” אותן.\nמהו המספר המינימלי של מצלמות שנצטרך על מנת לשמור על כל \\(P\\)? כאן, ברור שהתשובה תלויה במבנה של הפוליגון \\(P\\).\n","code":""},{"path":"pol-tringle.html","id":"worst-case","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.1.3 מהו המקרה הגרוע ביותר?","text":"מציאת המספר המינימלי של מצלמות הנדרשות לשמירה על פוליגון נתון \\(P\\) היא בעיית אופטימיזציה אלגוריתמית, כלומר, הפתרון לה הוא אלגוריתם המחזיר קבוצת נקודות \\(G\\) מגודל מינימלי, כך שלכל \\(p\\P\\) קיימת \\(g \\G\\) כך שהקטע \\(\\overline{pg}\\) מוכל בתוך \\(P\\) (כלומר \\(g\\) שומרת על \\(p\\)). בעיה זו היא NP-קשה, בפרט, לא ידוע האם קיים אלגוריתם כזה עם זמן ריצה פולינומי (ויותר מכך, ההשערה הרווחת היא שלא קיים כזה).נוכל גם לשאול את השאלה הקומבינטורית הבאה: מהו מספר המצלמות המינימלי הנדרש במקרה הגרוע ביותר? במילים אחרות, היינו רוצים למצוא פונקציה \\(g(n)\\), כך ש: 1. \\(g(n)\\) מצלמות מספיקות לכל פוליגון בעל \\(n\\) קודקודים, וגם 2. קיים פוליגון בעל \\(n\\) קודקודים שעבורו נדרשות \\(g(n)\\) מצלמות.התבוננו במשפחת הפוליגונים הבאה, שלהם צורה דמויית מסרק.\nשימו לב שכדי לשמור על פוליגון מסרק עם שתי “שיניים” נדרשות שתי מצלמות: המשולשים שהם שיני המסרק אינם נחתכים, ולכן אין נקודה אחת ש”רואה” את שני הקודקודים העליונים שלהם. עבור מסרק עם 3 שיניים נדרשות 3 מצלמות, וכן הלאה. מהו מספר המצלמות שנצטרך עבור מסרק עם \\(k\\) שיניים? כמה קודקודים יש למסרק כזה?ניתן להציג את משפחת פוליגוני המסרק באופן כללי כך: לכל \\(n \\ge 3\\), פוליגון מסרק בעל \\(n\\) קודקודים מורכב מבסיס שהוא צלע אופקית, ומעליו \\(\\lfloor n / 3 \\rfloor\\) שיניים שכל אחת מהן מורכבת משתי צלעות כל אחת, ומחוברות ביניהן על-ידי צלעות אופקיות, כמו באיור הבא:\nקל לראות שניתן לבנות את המסרק כך שלא ניתן להציב מצלמה ששומרת על שני קודקודים שנמצאים בקצוות של שיניים שונות. לכן, מספר המצלמות הנדרשות עבור מסרק בעל \\(n\\) קודקודים הוא \\(\\lfloor n/3 \\rfloor\\).אם כך, ראינו שלכל n קיים פוליגון בעל n קודקודים עבורו מספר המצלמות הנדרש הוא \\(\\lfloor n/3 \\rfloor\\). במילים אחרות, \\(g(n)\\ge \\lfloor n/3 \\rfloor\\). אך האם זהו המקרה הגרוע ביותר? האם \\(\\lfloor n/3 \\rfloor\\) מצלמות תמיד מספיקות כדי לשמור על פוליגון בגודל \\(n\\)? את זה נגלה בחלק הבא.","code":""},{"path":"pol-tringle.html","id":"guarding","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.2 שמירה ושילושים","text":"","code":""},{"path":"pol-tringle.html","id":"diagonals","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.2.1 חלוקה בעזרת אלכסונים","text":"הגדרה: אלכסון של פוליגון\nאלכסון של פוליגון P הוא קטע פתוח המחבר שני קודקודים של P ומוכל בפנימו.דוגמה:התבוננו בפוליגונים שבאיור הבא, כולם בעלי 5 קודקודים, ואלכסוניהם מסומנים בקו מקווקו. לפוליגון מימין קיימים שלושה אלכסונים. לפוליגון האמצעי לעומת זאת יש רק שני אלכסונים. באופן כללי, בפוליגון בעל 5 קודקודים קיימים לכל היותר 5 אלכסונים. ניתן לראות זאת בפוליגון משמאל.\nשימו לב למקרה של פוליגון קמור: מכל קודקוד ניתן למתוח \\(n-3\\) אלכסונים (לכל קודקוד שהוא לא הוא עצמו או אחד משכניו). מכיוון שבאופן זה כל אלכסון נספר פעמיים (פעם אחת לכל אחד מקודקודיו), נחלק ב-2. לכן, התשובה היא \\(\\frac{n(n-3)}{2}\\).","code":""},{"path":"pol-tringle.html","id":"triangulation","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.2.2 שילוש של פוליגונים","text":"שילוש של פוליגונים הוא כלי מרכזי וחשוב בגיאומטריה של המישור, ויש לו שימוש רבים, בעיקר בתחום של גרפיקה ממוחשבת.הגדרה: שילוש (טריאנגולציה\nלחלוקה של פוליגון למשולשים על-ידי מספר מקסימלי של אלכסונים שאינם נחתכים אנו קוראים בשם שילוש (טריאנגולציה).דוגמה:בדרך כלל קיים יותר משילוש אחד לפוליגון. למשל, את הפוליגון באיור הבא ניתן לשלש במספר דרכים שונות. נסו למצוא שילוש השונה מהשניים המוצעים כאן.\n","code":""},{"path":"pol-tringle.html","id":"מדוע-נדרוש-מספר-מקסימלי-של-אלכסונים","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"מדוע נדרוש מספר מקסימלי של אלכסונים?","text":"זאת על מנת להבטיח שלא יהיו קודקודים של הפוליגון שאינם קודקודים של אחד המשולשים. מצב כזה יכול לקרות כאשר שלושה קודקודים עוקבים מופיעים על ישר אחד. ראו למשל את שלושת הקודקודים משמאל למטה באיור הקודם.ראינו דוגמה לפוליגון עם יותר משילוש אחד, אך האם תמיד קיים שילוש? התשובה היא כן! על מנת להוכיח זאת, נראה קודם שתמיד נוכל למצוא אלכסון בפוליגון בעל לפחות 4 קודקודים.","code":""},{"path":"pol-tringle.html","id":"משפט-לכל-פוליגון-פשוט-בעל-4-קודקודים-לפחות-קיים-אלכסון.","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"משפט: לכל פוליגון פשוט בעל 4 קודקודים לפחות, קיים אלכסון.","text":"הוכחה: יהי \\(P\\) פוליגון בעל \\(n\\) קודקודים, ויהי \\(v\\) הקודקוד השמאלי ביותר של \\(P\\) (במקרה שיש יותר מאחד כזה, נבחר בנמוך ביותר). נסמן ב-\\(u,w\\) את שני הקודקודים השכנים ל-\\(v\\) על שפת הפוליגון. אם הקטע הפתוח \\(\\overline{u w}\\) מוכל בפנים של \\(P\\), אזי מצאנו אלכסון של \\(P\\). אחרת, קיים לפחות קודקוד אחד של \\(P\\) בפנימו של המשולש המוגדר על ידי הקודקודים \\(u,v,w\\), או על הקטע \\(\\overline{u w}\\) (נשים לב כי מבחירת \\(v\\), הקודקודים \\(u, v, w\\) לא יכולים להיות כולם על ישר אחד). יהי \\(v'\\) הקודקוד השמאלי ביותר בתוך המשולש הזה. הקטע \\(\\overline{v v'}\\) לא חותך אף צלע של \\(P\\), אחרת, אחד מהקודקודים של צלע כזו היה בתוך המשולש ושמאלי יותר מ-\\(v\\). לכן, הקטע הפתוח \\(\\overline{v v'}\\) הוא אלכסון של \\(P\\).\n","code":""},{"path":"pol-tringle.html","id":"משפט-לכל-פוליגון-קיים-שילוש.","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"משפט: לכל פוליגון קיים שילוש.","text":"בנוסף, כל שילוש של פוליגון פשוט בעל \\(n\\) קודקודים מכיל בדיוק \\(n-2\\) משולשים ו- \\(2n-3\\) צלעות.הוכחה: יהי \\(P\\) פוליגון בעל \\(n\\) קודקודים. נוכיח את המשפט באינדוקציה על \\(n\\). עבור \\(n=3\\), \\(P\\) הוא משולש והמשפט מתקיים. יהי \\(n>3\\), ונניח שהמשפט מתקיים לכל \\(m<n\\). לפי המשפט שהוכחנו קודם, קיים ב-\\(P\\) אלכסון. כל אלכסון כזה מחלק את \\(P\\) לשני פוליגונים \\(P_1,P_2\\). מספר הקודקודים של כל אחד מהפוליגונים האלו קטן ממש מ-\\(n\\), ולכן לפי הנחת האינדוקציה קיים שילוש של \\(P_ 1\\) ו-\\(P_ 2\\), והאיחוד שלהם הוא שילוש של \\(P\\).\nכדי לחסום את מספר המשולשים, נתבונן בשילוש כלשהו של \\(P\\), ונבחר אלכסון \\(\\overline{uv}\\) כלשהו בשילוש (כאשר \\(u, v\\) הם קודקודים של \\(P\\)). אלכסון זה מחלק את \\(P\\) לשני פוליגונים \\(P_ 1, P_ 2\\), בעלי \\(m_ 1, m_ 2\\) קודקודים, בהתאמה. כל קודקוד של \\(P\\) פרט לקודקודים \\(u, v\\) מופיע בדיוק באחד מ-\\(P_ 1, P_ 2\\), והקודקודים \\(u, v\\) מופיעים בשניהם. לכן, מתקיים \\(m_1+m_2= n+2\\). לפי הנחת האינדוקציה, מספר המשולשים בשילוש של \\(P_1\\) הוא \\(m_1-2\\), ומספר המשולשים בשילוש של \\(P_2\\) הוא \\(m_2- 2\\). לכן השילוש של מכיל בסך הכל \\(m_1-2+ m_2-2 = n- 2\\) משולשים.\nבאופן דומה, כל אלכסון בשילוש של \\(P\\) פרט ל-\\(\\overline{u v}\\) מופיע בדיוק באחד מהשילושים של \\(P_1, P_2\\), והאלכסון \\(\\overline{u v }\\) מופיע כצלע בשניהם. לכן לפי הנחת האינדוקציה, מספר הצלעות בשילוש של \\(P\\) הוא \\((2m_1 - 3)+ (2m_2- 3 )- 1 = 2 (m_1+m_2)-7=2(n+2)-7=2n-3\\).","code":""},{"path":"pol-tringle.html","id":"מציאת-שילוש.","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"מציאת שילוש.","text":"אז אמנם ראינו ששילוש קיים תמיד, אך כדי להשתמש בו נרצה גם להראות אלגוריתם שיודע למצוא שילוש ביעילות. שאלה למחשבה: השתמשו בהוכחות המשפטים המופיעות למעלה, על מנת להראות אלגוריתם המוצא שילוש של פוליגון פשוט בעל \\(n\\) קודקודים בזמן \\(O(n^2)\\).בהמשך נראה אלגוריתם יעיל יותר למציאת שילוש, עם זמן ריצה של \\(O(n \\log n)\\), ו-\\(O(n)\\) זיכרון.","code":""},{"path":"pol-tringle.html","id":"dual-graph","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.2.3 הגרף הדואלי לשילוש","text":"תכונה מעניינת (ושימושית!) נוספת של שילושים מתקבלת כשמתבוננים בגרף הדואלי לשילוש. למעשה, היצוג של שילוש באמצעות גרף מאפשר לנו לתרגם את הבעיה הגאומטרית לבעיה קומבינטורית.נסמן ב-\\(T\\) את אוסף המשולשים בשילוש כלשהו של פוליגון \\(P\\). הגרף הדואלי \\(G_T\\) לשילוש \\(T\\) הוא הגרף שקבוצת הקודקודים שלו מכילה קודקוד אחד לכל משולש ב-\\(T\\), וקבוצת הצלעות שלו מכילה צלע בין שני קודקודים \\(u,v\\) של הגרף אם המשולשים המתאימים לקודקודים אלו חולקים אלכסון משותף.דוגמה:באיור למטה ניתן לראות שילוש \\(T\\) ואת הגרף \\(G_T\\) המתאים לו.כל קודקוד של \\(G_T\\) מתאים למשולש מ-\\(T\\), וכל צלע של \\(G_T\\) מתאימה לאלכסון בשילוש (כל צלע חוצה אלכסון אחד). שימו לב שהגרף \\(G_T\\) הוא עץ. האם זה מקרי?\n","code":""},{"path":"pol-tringle.html","id":"אבחנה-הגרף-הדואלי-לשילוש-הוא-עץ.","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"אבחנה: הגרף הדואלי לשילוש הוא עץ.","text":"נראה שלכל שילוש \\(T\\), הגרף הדואלי \\(G_T\\) הוא עץ.הוכחה: ראשית, נשים לב שהגרף \\(G_T\\) הוא קשיר מכיוון שפנים הפוליגון קשיר. שנית, כל אלכסון מחלק את \\(P\\) לשני פוליגונים, לכן מחיקה של צלע מהגרף \\(G_T\\) מחלקת את הגרף לשני רכיבי קשירות. במילים אחרות, הגרף \\(G_T\\) הוא קשיר ואינו מכיל מעגלים, כלומר, הוא עץ.שימו לב: טענה זו אינה נכונה עבור פוליגון עם חורים! הגרף הדואלי לשילוש של פוליגון עם חורים עשוי להכיל מעגלים, כמו באיור למטה.חישבו, מדוע זה קורה? אילו אלכסונים אינם מחלקים את הפוליגון לשני חלקים?\n","code":""},{"path":"pol-tringle.html","id":"agp-thm","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.2.4 משפט הגלריה לאמנות","text":"ראינו קודם שכדי לשמור על פוליגון מסרק עם \\(n\\) קודקודים, נזדקק ל-\\(\\lfloor \\frac{n}{3} \\rfloor\\) מצלמות. במילים אחרות, זה אומר ש-\\(g(n)\\ge \\lfloor \\frac{n}{3} \\rfloor\\). האם זהו המקרה הגרוע ביותר? כלומר, האם \\(\\lfloor \\frac{n}{3} \\rfloor\\) מצלמות יספיקו לכל פוליגון בגודל \\(n\\) שנבחר? או שקיימיים פוליגונים “גרועים” יותר?התשובה היא שתמיד ניתן להסתפק ב-\\(\\lfloor \\frac{n}{3} \\rfloor\\) מצלמות! כלומר, נוכל להראות שמתקיים \\(g(n)\\le \\lfloor \\frac{n}{3} \\rfloor\\), ובכך להוכיח את המשפט המפורסם:","code":""},{"path":"pol-tringle.html","id":"משפט-הגלריה-לאמנות-gnlfloor-fracn3-rfloor.","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"משפט הגלריה לאמנות: \\(g(n)=\\lfloor \\frac{n}{3} \\rfloor\\).","text":"מעניין לדעת: הראשון לנסח ולהוכיח את משפט הגלריה לאמנות היה ואצלב כבטל (Václav Chvátal), אך את ההוכחה שנראה כאן גילה סטיב פיסק (Steve Fisk). ההוכחה של פיסק היתה קצרה ופשוטה יותר, ונחשבה אלגנטית כל כך עד שנכללה בספר “Proofs BOOK” - אוסף של הוכחות בהשראת אמרתו של פול ארדש (Paul Erdős): “place God keeps aesthetically perfect proofs”.לפני שנראה את ההוכחה לכך ש-\\(\\lfloor \\frac{n}{3} \\rfloor\\) מצלמות מספיקות תמיד, ננסה להבין כיצד ניתן להוכיח חסמים פשוטים יותר. כיצד ניתן להראות שמספר מסויים של מצלמות מספיק לכל פוליגון \\(P\\) בעל \\(n\\) קודקודים?דוגמה:נתבונן בשילוש של \\(P\\). קל להראות שמספיקות \\(n\\) מצלמות המוצבות על קודקודי \\(P\\), מדוע?\nקודקודי המשולשים הם קודקודים של \\(P\\), ומשולש הוא פוליגון קמור, ולכן קבוצה זו של מצלמות שומרת על כל \\(P\\). למעשה, מכיוון שבכל שילוש יש \\(n-2\\) משולשים, נוכל להסתפק ב-\\(n-2\\) מצלמות.כעת נראה הוכחה למשפט הגלריה לאמנות. אולי בשלב זה כבר ניחשתם כי הוכחה זו מבוססת גם היא על שילוש של הפוליגון. בנוסף לשילוש, ההוכחה תתבסס גם על צביעה של הגרף המוגדר על-ידי צלעות המשולשים וקודקודי הפוליגון (זהו לא הגרף הדואלי). נזכיר כי גרף הוא \\(k\\)-צביע (ניתן לצביעה ב-\\(k\\) צבעים) אם ניתן להתאים לכל אחד מקודקודיו צבע (מספר) בין 1 ל-\\(k\\) כך שכל שני קודקודים המחוברים בצלע משותפת צבועים בצבעים שונים.","code":""},{"path":"pol-tringle.html","id":"טענה-כל-שילוש-ניתן-לצביעה-בשלושה-צבעים.","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"טענה: כל שילוש ניתן לצביעה בשלושה צבעים.","text":"הוכחה: נוכיח את המשפט באינדוקציה על מספר הקודקודים \\(n\\). עבור \\(n=3\\)., הפוליגון הוא משולש וניתן לצביעה בשלושה צבעים. יהי \\(n> 3\\), ונניח שהמשפט מתקיים לכל \\(m<n\\). יהי \\(P\\) פוליגון בעל \\(n\\) קודקודים, נתבונן בשילוש כלשהו של \\(P\\), ונבחר אלכסון \\(overline{u v}\\) כלשהו בשילוש (כאשר \\(u,v\\) הם קודקודים של \\(P\\)). אלכסון זה מחלק את \\(P\\) לשני פוליגונים \\(P_1,P_2\\). לפי הנחת האינדוקציה, נוכל לצבוע את \\(P_1\\)בשלושה צבעים: אדום, כחול, וצהוב, ואת \\(P_2\\) בצבעים: כתום, סגול, וירוק. כעת נרצה “להדביק” את שני הפוליגונים כך שנקבל צכיעה של \\(P\\). מכיוון שבחירת הצבעים היא שרירותית, נוכל להניח בלי הגבלת הכלליות שבצביעה של \\(P_1\\) הקודקודים \\(u,v\\) נצבעו באדום וכחול בהתאמה, ובצביעה של \\(P_2\\) הם נצבעו בכתום וסגול בהתאמה. לכן נחליף את הצבע של כל קודקוד כתום לאדום, סגול לכחול, וירוק לצהוב. קיבלנו צביעה של \\(P\\) בשלושה צבעים.\n","code":""},{"path":"pol-tringle.html","id":"משפט-gnle-lfloor-fracn3-rfloor.","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"משפט: \\(g(n)\\le \\lfloor \\frac{n}{3} \\rfloor\\).","text":"כלומר, ניתן לשמור על כל פוליגון פשוט \\(P\\) בעל \\(n\\) קודקודים בעזרת \\(\\lfloor \\frac{n}{3} \\rfloor\\) מצלמות.הוכחה: נבחר שילוש כלשהו \\(T\\) של \\(P\\) ונצבע אותו בשלושה צבעים: אדום, כחול, וצהוב. מעיקרון שובך היונים, קיים לפחות צבע אחד שבו צבועים לכל היותר \\(\\lfloor \\frac{n}{3} \\rfloor\\) קודקודים (אחרת, נקבל שסכום הקודקודים גדול מ-\\(n\\)). נניח שצבע זה הוא האדום, ונמקם מצלמה בכל קודקוד הצבוע באדום. נשים לב שבכל משולש ב-T יש בדיוק קודקוד אחד הצבוע באדום: אחרת, נקבל צלע ששני קודקודיה צבועים באותו הצבע. מכיוון שכל משולש הוא קמור, המצלמה הממוקמת על הקודקוד האדום שומרת על כולו, ולכן המצלמות שהצבנו שומרות על כל P.","code":""},{"path":"pol-tringle.html","id":"גלריות-אורתוגונליות.","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"גלריות אורתוגונליות.","text":"עבור פוליגון פשוט אורתוגונלי, ניתן להראות כי מספיקים \\(\\lfloor \\frac{n}{4} \\rfloor\\) שומרים. קווי ההוכחה דומים: תחילה “מרבעים” את הפוליגון, כלומר מחלקים את הפוליגון למרובעים קמורים בעזרת אלכסונים. לאחר מכן, מוסיפים לכל מרובע את שני האלכסונים שלו (שימו לב שהאלכסונים חוצים זה את זה), ולבסוף מראים שקיימת צביעה של הגרף שהתקבל בארבעה צבעים. מכאן לפי עקרון שובך היונים, קיים צבע אחד שהשתמשנו בו לכל היותר \\(\\lfloor \\frac{n}{4} \\rfloor\\) פעמים, ומכיוון שלכל אחד מהמרובעים יש בדיוק קודקוד אחד הצבוע בצבע זה, קיבלנו קבוצה של מצלמות ששומרות על הפוליגון כולו.","code":""},{"path":"pol-tringle.html","id":"לחזרה-קריאה-בספר-הלימוד","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.2.5 לחזרה: קריאה בספר הלימוד","text":"בסעיפים הקודמים של חלק זה ראינו הוכחות מלאות לקיום של שילוש ומשפט הגלריה לאמנות. לשם השלמות של החומר באתר, ולמי שמעוניין בחזרה והרחבה, ניתן לקרוא כאן את הסעיף המתאים בספר הלימוד.","code":""},{"path":"pol-tringle.html","id":"קראו-את-סעיף-3.1-בספר-עמודים-4649.","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"קראו את סעיף 3.1 בספר (עמודים 46–49).","text":"","code":""},{"path":"pol-tringle.html","id":"אלגוריתם-לשילוש-של-פוליגון","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.3 אלגוריתם לשילוש של פוליגון","text":"","code":""},{"path":"pol-tringle.html","id":"איך-נחשב-שילוש","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.3.1 איך נחשב שילוש?","text":"בחלק הקודם ראינו ששילוש קיים תמיד, אך כדי להשתמש בו, נרצה גם להראות אלגוריתם שיודע למצוא שילוש ביעילות.שימו לב שההוכחות לקיום אלכסון ושילוש שראינו בחלק הקודם הן קונסטרוקטיביות, כלומר הן מציגות דרך למציאה של אלכסון ושילוש של פוליגון פשוט בעל \\(n\\) קודקודים בזמן \\(O(n^2)\\). נסו לחשוב בעצמכם: השתמשו בהוכחות המשפטים לקיום אלכסון ושילוש על מנת להראות אלגוריתם המוצא שילוש של פוליגון פשוט בעל \\(n\\) קודקודים בזמן \\(O(n^2)\\). (התשובה מופיעה בפסקה הראשונה של פרק 3.2 בספר הלימוד)","code":""},{"path":"pol-tringle.html","id":"האם-ניתן-למצוא-אלגוריתם-שילוש-יעיל-יותר","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"האם ניתן למצוא אלגוריתם שילוש יעיל יותר?","text":"בהחלט ניתן למצוא שילוש ביעילות עבור משפחות מסויימות של פוליגונים מיוחדים. למשל, אם הפוליגון שלנו קמור, נוכל לבחור קודקוד באופן שרירותי, ולהוסיף את כל האלכסונים המחברים אותו לכל הקודקודים שהם לא שכנים שלו. זמן הריצה יהיה לינארי, כלומר \\(O(n)\\).לכן, גישה אפשרית למציאת שילוש במקרה הכללי תהיה כזו: נחלק את הפוליגון שלנו לחלקים שניתן לשלש ביעילות, ולאחר מכן נשלש כל חלק בנפרד.בסעיפים הבאים נראה אלגוריתם למציאת שילוש שמשתמש בגישה הזו, על ידי חלוקה של הפוליגון לחלקים מונוטוניים. זמן הריצה של האלגוריתם הוא \\(O(n \\log n)\\), והוא משתמש ב-\\(O(n)\\) זיכרון.הגדרה: פוליגון מונוטוני\nפוליגון פשוט \\(P\\) נקרא מונוטוני ביחס לישר \\(\\ell\\) אם לכל ישר \\(\\ell'\\) שמאונך ל-\\(\\ell\\), החיתוך של \\(\\ell'\\)עם הפוליגון הוא קשיר. במילים אחרות, \\(\\ell'\\cap P\\) יכול להיות קטע, נקודה, או הקבוצה הריקה.פוליגון שהוא מונוטוני ביחס לציר ה-\\(y\\) נקרא \\(y\\)-מונוטוני. אילו מהפוליגונים הבאים הם \\(y\\)-מונוטוניים? ואילו \\(x\\)-מונוטוניים?\n(א) הוא גם \\(y\\)-מונוטוני וגם \\(x\\)-מונוטוני (ד) הוא רק \\(x\\)-מונוטוני (ה) הוא רק \\(y\\)-מונוטוני","code":""},{"path":"pol-tringle.html","id":"חלוקה-לפוליגונים-מונוטוניים","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.3.2 חלוקה לפוליגונים מונוטוניים","text":"בסרטון הבא נדבר על אלגוריתם MakeMonotone, המוצא חלוקה של פוליגון \\(P\\) בעל \\(n\\) קודקודים לפוליגונים \\(y\\)-מונוטוניים. האלגוריתם משתמש בשיטת הישר הסורק שלמדנו בחלק השני של פרק 2, ולכן מומלץ להיזכר ולוודא קודם שהבנתם את הפרטים של שיטה זו.","code":""},{"path":"pol-tringle.html","id":"צפו-בסרטון-הבא.-3","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"צפו בסרטון הבא.","text":" \nהנה התשובה לשאלה האחרונה שנשאלה בסרטון: היצוג של \\(P\\) ותתי הפוליגונים המונוטוניים בחלוקה שלו יהיה בעזרת מבנה DCEL, כפי שלמדנו בחלק השלישי של פרק 2.כיצד נממש את האלגוריתם הסורק ביעילות? על אופן המימוש ופרטי האלגוריתם MakeMonotone תקראו בסעיף 3.2 של ספר הלימוד. זמן הריצה של האלגוריתם הוא \\(O(n \\log n)\\), והוא משתמש ב-\\(O(n)\\) זיכרון.","code":""},{"path":"pol-tringle.html","id":"קראו-את-סעיף-3.2-בספר-עמודים-4955.","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"קראו את סעיף 3.2 בספר (עמודים 49–55).","text":"","code":""},{"path":"pol-tringle.html","id":"שילוש-של-פוליגון-מונוטוני","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"3.3.3 שילוש של פוליגון מונוטוני","text":"לאחר שראינו כיצד ניתן לחלק פוליגון פשוט בעל \\(n\\) קודקודים לפוליגונים \\(y\\)-מונוטוניים בזמן \\(O(n \\log n)\\), נותר לנו להראות שכל פוליגון מונוטוני ניתן לשילוש בזמן לינארי.","code":""},{"path":"pol-tringle.html","id":"צפו-בסרטון-הבא.-4","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"צפו בסרטון הבא.","text":" \nבסעיף 3.3 של ספר הלימוד תקראו בפירוט רב יותר על האלגוריתם TriangulateMonotonePolygons שתואר בסרטון. זמן הריצה של האלגוריתם הזה הוא אכן \\(O(n)\\), ומכאן שקיבלנו אלגוריתם שילוש בזמן - שיפור משמעותי לעומת האלגוריתם בזמן ריבועי (\\(O(n^2)\\)) המבוסס על ההוכחה לקיום שילוש. למעשה, נוכל להסיק שכל מפה מישורית עם \\(n\\) קודקודים ניתנת לשילוש בזמן !","code":""},{"path":"pol-tringle.html","id":"קראו-את-סעיף-3.3-בספר-עמודים-55-58.","chapter":"יחידה 3 שילושי פוליגונים ובעיית הגלריה לאמנות","heading":"קראו את סעיף 3.3 בספר (עמודים 55-58).","text":"","code":""},{"path":"linear-prog.html","id":"linear-prog","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","text":"","code":""},{"path":"linear-prog.html","id":"preface","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"4.1 הקדמה","text":"","code":""},{"path":"linear-prog.html","id":"molding-prob","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"4.1.1 בעיית הייצור באמצעות תבניות","text":" חפצים רבים שאנו משתמשים בהם באופן יום-יומי מיוצרים בתהליך אוטומטי, שבו יוצקים נוזל לתבנית רב פעמית, ולאחר שהוא מתמצק שולפים אותו החוצה מבלי לפגוע בתבנית. כמובן שלא כל צורה תלת מימדית ניתנת לייצור באופן הזה, למשל צורה שהיא כדורית. נניח שנתון לנו פוליהדרון (גוף תלת מימדי המורכב מפאות שהן פוליגונים, צלעות שהן קוים ישרים, וקודקודים שהם נקודות), איך נדע האם ניתן לייצר אותו על ידי יציקה לתבנית רב פעמית?","code":""},{"path":"linear-prog.html","id":"קראו-את-ההקדמה-לפרק-4-עמודים-63-64.","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"קראו את ההקדמה לפרק 4 (עמודים 63-64).","text":"","code":""},{"path":"linear-prog.html","id":"geom-model","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"4.1.2 מודל גאומטרי לבעיה","text":" בהינתן פוליהדרון \\(P\\) בעל \\(n\\) פאות שהן פוליגונים, נרצה לתכנן תבנית שתאפשר לנו לייצר את \\(P\\). כדי שנוכל לחלץ את \\(P\\) מהתבנית על ידי משיכה בכיוון אחד, נדרוש שבדיוק אחת מהפאות של \\(P\\) תהיה מוכלת בפאה העליונה של התבנית. התבנית חייבת להתאים לצורה של \\(P\\), אבל את הפאה העליונה נוכל לבחור מתוך \\(n\\) הפאות של \\(P\\), ולכן יש לכל היותר \\(n\\) תבניות אפשרויות. כמובן שלא כל תבנית תאפשר לנו לחלץ את \\(P\\).(לשם הפשטות, האיורים מציגים חתך עומק של התבנית והפוליהדרון בדו-מימד. הניחו שכל חתכי העומק של הפוליהדרון זהים לזה שבאיור.)שלושת התבניות הראשונות משמאל.אובייקט שניתן לייצור על ידי יציקה לתבנית רב פעמית נקרא castable. כדי לבדוק האם \\(P\\) הוא castable, נבדוק את כל האפשרויות לתבנית עבורו. בהינתן אחת מהאפשרויות האלה (כלומר, בהינתן הפאה של \\(P\\) שתהיה מוכלת בפאה העליונה של התבנית), נרצה לקבוע האם קיים כיוון (וקטור) \\(\\overrightarrow{d}\\) כך שניתן לשלוף את \\(P\\) מהתבנית על ידי משיכה בכיוון \\(\\overrightarrow{d}\\). שימו לב שלכל פאה \\(f\\) של \\(P\\) שהיא לא הפאה העליונה, יש פאה מתאימה \\(\\hat{f}\\) בתבנית. באופן אינטואיטיבי, כדי שנוכל להוציא את \\(P\\) מהתבנית, כל פאה \\(f\\) של \\(P\\) צריכה לנוע בכיוון שהוא “נגדי” או לכל היותר “מאונך” ל-\\(\\hat{f}\\). באופן פורמלי, נוכל להסתכל על הנורמל (כלפי חוץ מהפוליגון) של פאה \\(f\\), נסמן אותו \\(\\overrightarrow{\\mu}( f )\\). הנורמל של \\(f\\) הוא וקטור המאונך למישור המכיל את \\(f\\). נוכל להראות שהפאה המתאימה \\(\\hat{f}\\) של התבנית, מאפשרת תנועה רק בכיוון \\(\\overrightarrow{d}\\) שבו הזווית (הקטנה) שנוצרת בין \\(\\overrightarrow{d}\\) ל-\\(\\overrightarrow{\\mu}( f )\\) היא לפחות \\(90 ^\\circ\\).הטענה הזו מובילה להגדרת הבעיה באופן הבא: יש למצוא כיוון \\(\\overrightarrow{d}\\) כך שהזוית שלו עם הנורמלים של כל אחת מהפאות של \\(P\\) היא לפחות \\(90 ^\\circ\\). כל פאה של P בעצם מהווה אילוץ על הכיוון \\(\\overrightarrow{d}\\). כל אילוץ כזה ניתן לתאר ע”י משוואה לינארית: הזוית בין \\(\\overrightarrow{d}\\) ל-\\(\\overrightarrow{\\mu}( f )\\) גדולה או שווה ל-\\(90 ^\\circ\\) אם ורק אם \\(\\overrightarrow{d} \\cdot \\overrightarrow{\\mu}( f ) \\le 0\\). נוכל לייצג את \\(\\overrightarrow{d}\\) על ידי נקודה במישור \\(z = 1\\), כלומר, \\(\\overrightarrow{d}\\) יהיה הוקטור \\((x,y,1)\\) מתחיל בראשית הצירים ומסתיים בנקודה \\((x, y, 1 )\\). לכן עבור \\(\\overrightarrow{\\mu}( f ) =( \\mu_x, \\mu_y, \\mu_z )\\) נקבל אילוץ שהוא בעצם משוואה של חצי מישור: \\(\\mu_x \\cdot x + \\mu_y \\cdot y + \\mu_z \\le 0\\).המשמעות היא שקיים כיוון \\(\\overrightarrow{d}\\) המאפשר לשלוף את \\(P\\) מהתבנית, אם ורק אם קיימת נקודה \\(( x, y )\\) המקיימת כל כל האילוצים, כלומר, נקודה שנמצאת בחיתוך של אוסף חצאי המישורים המתאימים להם. בעצם המרנו את הבעיה המקורית לבעיה גאומטרית במישור: בהינתן אוסף של n חצאי מישורים, יש למצוא נקודה בחיתוך שלהם, אם החיתוך לא ריק. בהמשך נראה כיצד ניתן לפתור את הבעיה הזו בזמן צפוי \\(O ( n )\\), ולכן נוכל לפתור את בעיית הייצור באמצעות תבניות בזמן צפוי \\(O ( n^2 )\\).","code":""},{"path":"linear-prog.html","id":"קראו-את-סעיף-4.1-בספר-עמודים-64-66.","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"קראו את סעיף 4.1 בספר (עמודים 64-66).","text":"","code":""},{"path":"linear-prog.html","id":"line-int","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"4.2 חיתוך של חצאי מישורים","text":"","code":""},{"path":"linear-prog.html","id":"div-con-alg","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"4.2.1 אלגוריתם בשיטת הפרד ומשול","text":"בחלק הקודם ראינו כיצד ניתן להמיר את הבעיה של ייצור באמצעות תבניות לבעיה של מציאת נקודה כלשהי המספקת אוסף של אילוצים לינאריים בשני משתנים, או לחילופין, לבעיה הגאומטרית של מציאת נקודה כלשהי בחיתוך של אוסף חצאי מישורים. החיתוך של אוסף חצאי מישורים הוא תחום קמור, אך הוא אינו חייב להיות חסום. הנה דוגמה לתחום קמור שאינו חסום (מימין), ותחום קמור חסום (משמאל).\nלפני שנדבר על הבעיה של מציאת נקודה כלשהי בחיתוך, נראה קודם כיצד ניתן למצוא את קבוצת כל הנקודות בחיתוך. בחלקו הראשון של סעיף 4.2 בספר הלימוד תקראו על אלגוריתם IntersectHalfPlanes, המקבל כקלט אוסף \\(H\\) של חצאי מישורים, ומחשב את התחום הקמור שהוא החיתוך שלהם. זהו אלגוריתם הפועל בשיטת הפרד ומשול: הוא מחלק את הקבוצה \\(H\\) באופן שרירותי לשתי קבוצות, מחשב את החיתוך של כל אחת מהן באופן רקורסיבי, ולאחר מכן מחשב את החיתוך של שני התחומים הקמורים שהתקבלו בעזרת פרוצדורה נוספת בשם IntesectConvexRegions.את אלגוריתם IntersectConvexRegions לחישוב החיתוך בין תחומים קמורים נתאר בהמשך החלק הזה.","code":""},{"path":"linear-prog.html","id":"קראו-את-חלקו-הראשון-של-סעיף-4.2-בספר-הלימוד-עמודים-6668.","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"קראו את חלקו הראשון של סעיף 4.2 בספר הלימוד (עמודים 66–68).","text":"","code":""},{"path":"linear-prog.html","id":"convex-int","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"4.2.2 חיתוך של פוליגונים קמורים","text":"בחלק השלישי של יחידה 2 (המדבר על פעולות בוליאניות), ראינו שניתן לחשב את החיתוך של שני פוליגונים (לא בהכרח קמורים) בזמן O ( ( n + k ) log n ), כאשר k הוא מספר נקודות חיתוך, בעזרת האלגוריתם MapOverlay. מהו המספר המקסימלי האפשרי של נקודות חיתוך בין צלעות של שני פוליגונים קמורים בעלי \\(n\\) קודקודים כל אחד? נסו לצייר שני פוליגונים קמורים עם מספר מקסימלי של נקודות חיתוך.המספר המקסימלי האפשרי של נקודות חיתוך בין שני פוליגונים קמורים \\(C_1\\) ו-\\(C_2\\) בעלי\n\\(n\\) נקודות כל אחד, הוא\n\\(2 n\\). הסיבה היא שכל צלע \\(e\\) של \\(C_1\\) יכולה להחתך עם לכל היותר שתי צלעות של \\(C_2\\): אם \\(e\\) היתה נחתכת עם יותר משתי צלעות של \\(C_2\\), אז \\(C_2\\) לא היה יכול להיות קמור.\nהנה דוגמה למשפחה של זוגות פוליגונים קמורים \\(C_1\\) ו-\\(C_2\\) כך שכל צלע של \\(C_1\\) נחתכת עם בדיוק שתי צלעות של \\(C_2\\): אלו זוגות של פוליגונים משוכללים בעלי \\(n\\) צלעות המסובבים בזוית שונה שונה סביב המרכז.\nאם נשתמש באלגוריתם MapOverlay עבור מציאת החיתוך בין פוליגונים קמורים, זמן הריצה יהיה \\(O ( n \\log n )\\), כי כמו שראינו בשאלה למעלה, \\(k \\le 2 n\\). לכן, לפי שיטת האב (Master Theorem), זמן הריצה הכולל עבור אלגוריתם IntersectHalfPlanes יהיה \\(O ( n \\log^2 n )\\). האם בכל זאת ניתן לחשב את החיתוך באופן יעיל יותר עבור תחומים קמורים? התשובה היא כן! (זכרו שתמיד נשאף לזמן ריצה לינארי, או \\(O ( n \\log n )\\)…)אלגוריתם MapOverlay משתמש בשיטת הישר הסורק, ולזמן הריצה שלו יש שני גורמים. הגורם הראשון הוא \\(( n + k )\\) – מספר המאורעות. הגורם השני הוא \\(\\log n\\) – הזמן לטיפול במאורע, כלומר, עדכון הסטטוס (שיכול להכיל \\(O ( n )\\) קטעים), והוספת מאורע לתור המאורעות בכל פעם שמצאנו נקודת חיתוך. אך האם זהו המצב גם עבור פוליגונים קמורים?למעשה, עבור פוליגונים קמורים יהיו לכל היותר 4 צלעות שחותכות את הישר הסורק בכל רגע נתון. נוכל לראות זאת אם נחלק כל פוליגון לשרשרת ימנית ושרשרת שמאלית (מהקודקד הגבוה ביותר לקודקוד הנמוך ביותר). כל שרשרת כזאת היא \\(y\\)-מונוטונית, ולכן חותכת את הישר הסורק (האופקי) פעם אחת בלבד.\nעובדה זו מובילה לכך שהטיפול בכל מאורע יתבצע בזמן קבוע, וכבר לא יהיה לנו צורך במאורעות שהם נקודות חיתוך. באופן זה נקבל אלגוריתם למציאת חיתוך של פוליגונים קמורים עם זמן ריצה של \\(O ( n )\\) בלבד, ובכך נשפר את זמן הריצה עבור חיתוך חצאי מישורים ל-\\(O ( n \\log n )\\).","code":""},{"path":"linear-prog.html","id":"קראו-את-חלקו-השני-של-סעיף-4.2-בספר-הלימוד-עמודים-7168.","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"קראו את חלקו השני של סעיף 4.2 בספר הלימוד (עמודים 71–68).","text":"","code":""},{"path":"linear-prog.html","id":"planar-LP","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"4.3 תכנון לינארי במישור","text":"","code":""},{"path":"linear-prog.html","id":"what-is-LP","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"4.3.1 מהו תכנון לינארי?","text":"תכנון לינארי היא בעיית אופטימיזציה של ביטוי לינארי, תחת אוסף של אילוצים לינאריים. זוהי בעייה מרכזית בתחום של חקר ביצועים, שבו בעיות אופטימיזציה רבות ניתנות לתאור באמצעות תוכנית לינארית. הבעיה צברה פופולריות רבה משום שהיא שימושית בתחומים רבים נוספים, ולכן במשך השנים נעשו מאמצים רבים למציאת פתרונות יעילים ומהירים עבורה. בסרטון הבא נראה דוגמה לתוכנית כזאת, נזכיר חלק מהכלים הקיימים כיום לפתרון בעיות תכנון לינארי, ונדבר על הקשר בין תכנון לינארי במישור לבעיית החיתוך של חצאי מישורים.","code":""},{"path":"linear-prog.html","id":"צפו-בסרטון-הבא-3","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"צפו בסרטון הבא:","text":"","code":""},{"path":"linear-prog.html","id":"קראו-את-חלקו-הראשון-של-סעיף-4.3-בספר-הלימוד-עמודים-7172.","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"קראו את חלקו הראשון של סעיף 4.3 בספר הלימוד (עמודים 71–72).","text":"","code":""},{"path":"linear-prog.html","id":"inc-alg","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"4.3.2 אלגוריתם אינקרמנטלי","text":"בחלקו השני של סעיף 4.3 בספר הלימוד מתואר אלגוריתם אינקרמנטלי בשם 2DBoundedLP, לפתרון של תוכנית לינארית בשני מימדים. האלגוריתם פועל תחת ההנחה שהתוכנית הלינארית חסומה. לכן, בשלב הזה נניח כי ניתן למצוא ולהוסיף לתוכנית הלינארית שני חצאי מישורים \\(m_1, m_2\\), שיגרמו לכך שהתוכנית תהיה חסומה בכיוון \\(\\overrightarrow{c}\\), אך לא ישנו את הפתרון האופטימלי במקרה שבו התוכנית חסומה. בהמשך נראה כיצד להימנע מהנחה זו ולקבוע מראש האם התוכנית חסומה או לא.האלגוריתם האינקרמנטלי מתחיל מפתרון עבור \\(C_0 = m_1 \\cap m_2\\), ואז מוסיף את יתר חצאי המישורים \\(h_1, \\dots, h_n\\) לפי הסדר. בשלב ה-\\(\\), האלגוריתם ימצא קודקוד v_i שהוא הנקודה שממקסמת את פונקציית המטרה בחיתוך \\(C_i = m_1 \\cap m_2 \\cap h_1 \\cap h_2 \\cap \\dots \\cap h_i\\). הרעיון הוא שבכל שלב מצמצמים את התחום הפיזיבילי, ויש שתי אפשרויות עבור \\(v_i\\):אם \\(v_{-1}\\h_i\\) (כמו באיור הימני למטה), אז \\(h_i\\) לא שינה את הפתרון האופטימלי ולכן \\(v_i = v_{-1}\\). אחרת, \\(h_i\\) גרם לכך ש-\\(C_i\\) כבר לא כולל את \\(v_{-1}\\) (כמו באיור השמאלי למטה). בספר תראו הוכחה לכך שבמקרה זה, אם \\(C_i\\) לא ריק, אז \\(v_i\\) בהכרח נמצא על הישר \\(\\ell_i\\) המגדיר את חצי המישור \\(h_i\\).\nבאופן די מאכזב, זמן הריצה המתקבל מאלגוריתם זה הוא \\(O(n^2)\\), מכיון שבמקרה השני נצטרך לחשב את החיתוך של \\(\\ell_i\\) עם חצאי המישורים \\(m_1, m_2, h_1, \\dots, h_{-1}\\). לכן, במקרה הגרוע, זמן הריצה עבור השלב ה-\\(\\) יהיה \\(O()\\). כמה פעמים יתעדכן הפתרון? נסו לחשוב על המקרה הגרוע ביותר: כמה פעמים לכל היותר יכול לקרות המקרה השני, בו נצטרך לעדכן את \\(v_i\\) בזמן \\(O()\\)?(התשובה נמצאת בפסקה האחרונה של סעיף 4.3 בספר הלימוד)בהמשך נראה כיצד בחירה רנדומית של הסדר בו מוסיף האלגוריתם את חצאי המישורים, מובילה לתוחלת זמן ריצה לינארית.","code":""},{"path":"linear-prog.html","id":"קראו-את-חלקו-השני-של-סעיף-4.3-בספר-הלימוד-עמודים-7376.","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"קראו את חלקו השני של סעיף 4.3 בספר הלימוד (עמודים 73–76).","text":"","code":""},{"path":"linear-prog.html","id":"rand-alg","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"4.3.3 אלגוריתם רנדומי","text":"כמו שהובטח בחלקים הקודמים, תכנון לינארי במישור אכן ניתן לפיתרון בזמן צפוי של \\(O( n )\\), על ידי האלגוריתם\n2DRandomizedBoundedLP אותו נציג בחלק זה. זהו כמובן אלגוריתם רנדומי, והוא זהה כמעט לחלוטין לאלגוריתם האינקרמטלי שהוצג בסעיף הקודם: ההבדל היחידי הוא בשורה השנייה של האלגוריתם, שם מחשבים פרמוטציה אקראית של חצאי המישורים בעזרת פרוצדורה בשם RandomPermutation.בסרטון הבא נראה כיצד שינוי זה, שנראה לכאורה כאילו אינו משפיע על האלגוריתם, מוביל לתופעה מעניינת ביותר: תוחלת זמן ריצה תהיה לינארית. כלומר, כאשר מגרילים את הסדר בו האלגוריתם האינקמנטלי בוחן את חצאי המישורים, מקבלים שבממוצע על פני כל הפרמוטציות האפשריות, זמן הריצה הוא \\(O( n )\\).","code":""},{"path":"linear-prog.html","id":"צפו-בסרטון-הבא-4","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"צפו בסרטון הבא:","text":"","code":""},{"path":"linear-prog.html","id":"קראו-את-סעיף-4.3-בספר-הלימוד-עמודים-6668.","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"קראו את סעיף 4.3 בספר הלימוד (עמודים 66–68).","text":"","code":""},{"path":"linear-prog.html","id":"unbounded-LP","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"4.3.4 תוכנית לינארית שאינה חסומה","text":"בסעיפים הקודמים נמנענו מהטיפול במקרה בו התוכנית הלינארית אינה חסומה, על ידי הוספת שני אילוצים מלאכותיים, \\(m_1,m_2\\). בחלק זה נראה כיצד ניתן לבדוק האם תוכנית לינארית היא חסומה, ואם היא לא חסומה, נראה כיצד למצוא שני אילוצים \\(h_1,h_2\\) שישמשו אותנו לאתחול האלגוריתם במקום \\(m_1,m_2\\).אם התוכנית הלינארית אינה חסומה, אז קיימת קרן \\(\\rho\\) המוכלת כולה באיזור הפיזיבילי \\(C\\). הקרן הזו מוגדרת על ידי נקודה p וכיוון \\(\\overrightarrow{d}\\). נשים לב שפונקציית המטרה מקבלת ערכים הולכים וגדלים לאורך הקרן rho אם ורק אם הזווית הקטנה בין הוקטור \\(\\overrightarrow{d}\\) לוקטור המטרה \\(\\overrightarrow{c}\\) קטנה מ-\\(90 ^\\circ\\). בנוסף, לכל חצי מישור \\(h\\), הזוית בין \\(\\overrightarrow{d}\\) לנורמל \\(\\overrightarrow{\\mu}( h )\\) של h (בכיוון הצד הפיזיבילי) היא לכל היותר . ניתן לראות דוגמה לכך בציור מטה. נוסף לכך, אוסף האילוצים עבורם \\(\\overrightarrow{\\mu}( h )\\) בדיוק מאונך ל-\\(\\overrightarrow{d}\\) (\\(h_1, h_5\\) באיור), חייב להיות פיזיבילי.\nשימו לב שהבעיה של מציאת הקרן \\(\\rho\\) דומה לבעיית הייצור באמצעות תבניות שראינו בחלק הראשון של יחידה זו. מכיוון שכאן הבעיה מוגדרת בשני מימדים, נוכל לפתור אותה על ידי תכנון לינארי במימד אחד, בזמן \\(O( n )\\). בסעיף 4.5 של ספר תוכלו לקרוא תיאור מפורט של פתרון זה.","code":""},{"path":"linear-prog.html","id":"קראו-את-סעיף-4.4-בספר-הלימוד-עמודים-7982.","chapter":"יחידה 4 תכנון ליניארי וחיתוך של חצאי מישורים","heading":"קראו את סעיף 4.4 בספר הלימוד (עמודים 79–82).","text":"פתרון אלטרנטיבי: דרך אחרת למציאת הקרן \\(\\rho\\), היא להתבונן בחצי המישור \\(h_i\\) עבורו הזווית הקטנה בין \\(\\overrightarrow{c}\\) ל-\\(\\overrightarrow{\\mu}( h_i )\\) היא הגדולה ביותר. \n  החיתוך בין הישר לבין חצי מישור אחר \\(h_j\\) הוא קרן \\(\\rho\\) על . אם לכל \\(j \\neq \\) הזוית הקטנה בין הקרן \\(\\rho\\) שמוגדרת על ידי \\(\\ell_1 \\cap h_j\\) לבין \\(\\overrightarrow{c}\\) קטנה או שווה ל-, אז הקרן שראשיתה בנקודה הקיצונית ביותר בכיוון \\(\\overrightarrow{c}\\) היא העדות לכך ש-C אינו חסום ביחס ל-\\(\\overrightarrow{c}\\). אחרת, אם עבור \\(h_j\\) כלשהו הזוית הקטנה בין \\(\\rho\\) ל-\\(\\overrightarrow{c}\\) גדולה מ-, אז חצאי המישורים \\(h_i\\) ו-\\(h_j\\) הם ההוכחה לכך ש-\\(C\\) חסום ביחס ל-\\(\\overrightarrow{c}\\). הסיבה לכך היא שהזווית בין \\(\\overrightarrow{c}\\) ל-\\(\\overrightarrow{\\mu}( h_j )\\) קטנה יותר מהזווית בין \\(\\overrightarrow{c}\\) ל-\\(\\overrightarrow{\\mu}( h_i )\\), ולכן הזוית בין \\(h_j\\) ל-\\(\\overrightarrow{c}\\) גדולה מ-\\(90^\\circ\\).\n ","code":""},{"path":"orthogonal-range-seach.html","id":"orthogonal-range-seach","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"יחידה 5 חיפוש בתחומים אורתוגונלים","text":"","code":""},{"path":"orthogonal-range-seach.html","id":"preface","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"5.1 הקדמה","text":"","code":""},{"path":"orthogonal-range-seach.html","id":"data-bases","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"5.1.1 חיפוש במסדי נתונים","text":"הייצוג הגאומטרי של מסד הנתונים יהיה באמצעות אוסף של נקודות במרחב ה-\\(d\\) מימדי: כל רשומה תיוצג באמצעות נקודה במרחב, כאשר כל שדה של הרשומה מתאים לקואורדינטה. עבור שאילתה המבקשת את אוסף הרשומות הנמצאות בתחום מסויים של ערכים (בשדה אחד או יותר), הייצוג הגאומטרי יהיה תחום אורתוגונלי \\(R\\), כלומר, תיבה \\(d\\)-מימדית מקבילה לצירים. במישור זהו מלבן שצלעותיו מקבילות לצירים, ובשלושה מימדים זוהי קוביה שפאותיה מקבילות לצירים.בפרק זה נציג שני מבני נתונים לאחסון אוסף \\(P\\) של נקודות במרחב ה-\\(d\\) מימדי, כך שנוכל לענות ביעילות על שאילתות מהסוג הבא: בהינתן תחום אורתוגונלי \\(R\\), אילו מהנקודות של \\(P\\) נמצאות בתוך \\(R\\)?","code":""},{"path":"orthogonal-range-seach.html","id":"קראו-את-ההקדמה-לפרק-5-בספר-הלימוד-עמודים-9596.","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"קראו את ההקדמה לפרק 5 בספר הלימוד (עמודים 95־96).","text":"","code":""},{"path":"orthogonal-range-seach.html","id":"on-the-line","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"5.1.2 חיפוש בתחומים על הישר","text":"בעיות רבות בגאומטריה חישובית נעשות פשוטות הרבה יותר כאשר הן נתונות במימד אחד, ובמחקר התאורטי מופיעים לעיתים קרובות פתרונות במימד אחד לבעיות מורכבות, כצעד מקדים לפתרונות במימדים גבוהים יותר. לכן, לפני שניגש לפתרון הבעיה של חיפוש בתחומים בשני מימדים או יותר, ננסה קודם להבין כיצד ניתן לפתור אותה עבור אוסף P של נקודות ממימד אחד, כלומר, אוסף של נקודות שכולן על ישר אחד. שימו לב שהשאילתה על הישר היא פשוט טווח של ערכים, R equals left square bracket x comma x’ right square bracket.\nאפשרות אחת לפתרון היא למיין את נקודות P ולשמור אותן במערך. בהינתן טווח left square bracket x comma x’ right square bracket, נמצא בעזרת חיפוש בינארי את הנקודות הראשונה במערך שגדולה או שווה ל-x, ואז נעבור על תאי המערך לפי הסדר החל מנקודה זו, ונדווח על נקודות כל עוד הן קטנות או שוות ל-x’. זמן השאילתה יהיה O( log n plus k) כאשר k הוא מספר הנקודות בפלט. זמן העיבוד המקדים הוא O( n log n) וסיבוכיות המקום היא O( n). לפתרון המשתמש במערך יש שני חסרונות: הוא לא דינאמי (כלומר, לא ניתן לבצע הוספה או מחיקה של נקודות), ולא ניתן להכליל אותו למימדים גבוהים. לכן, פרק 5.1 של ספר הלימוד מתאר פתרון המשתמש בעץ חיפוש בינארי, שבו הנקודות מופיעות בעלים. כל קודקוד פנימי מכיל את הערך המקסימלי של עלה המופיע בתת העץ השמאלי שלו. בהינתן עץ חיפוש T וטווח left square bracket x comma x ’ right square bracket, אלגוריתם השאילתה 1DRangeQuery מוצא את הקודקוד בו המסלולים מהשורש ל-x ו-x ’ מתפצלים, ואז מחזיר את כל הנקודות בעלים שנמצאים מימין להמשך המסלול ל-bold italic x, ואת הנקודות בעלים שנמצאים משמאל להמשך המסלול ל-bold italic x bold’. אלו בדיוק הערכים בעץ הנמצאים בין x ’ ל-x.\nבהמשך של יחידה זו, נראה שתי דרכים שונות להכללת פתרון זה עבור מימדים גבוהים.","code":""},{"path":"orthogonal-range-seach.html","id":"קראו-את-סעיף-5.1-בספר-הלימוד-עמודים-9699.","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"קראו את סעיף 5.1 בספר הלימוד (עמודים 96–99).","text":"","code":""},{"path":"orthogonal-range-seach.html","id":"in-the-plane","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"5.2 חיפוש בתחומים במישור","text":"","code":""},{"path":"orthogonal-range-seach.html","id":"kd-trees","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"5.2.1 עצי-kd","text":"","code":""},{"path":"orthogonal-range-seach.html","id":"צפו-בסרטון-הבא-5","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"צפו בסרטון הבא:","text":"ניתן לבנות עץ-kd עבור אוסף של n נקודות בזמן O( n log n). סיבוכיות המקום שלו היא O( n), וזמן השאילתה הוא \\(O(\\sqrt{n}+ k)\\), כאשרk הוא גודל הפלט, כלומר מספר הנקודות הנמצאות בתחום הנתון. בסעיף 5.2 מתואר האלגוריתם BuildKdTree שבונה את העץ, ואלגוריתם השאילתה SearchKdTree. קראו בעיון את ניתוח זמן הבניה, סיבוכיות המקום, וזמן השאילתה של עץ ה-kd.","code":""},{"path":"orthogonal-range-seach.html","id":"קראו-את-סעיף-5.2-בספר-עמודים-99105.","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"קראו את סעיף 5.2 בספר (עמודים 99–105).","text":"\n(TODO)\n\nאילו מהנקודות יבדקו (אך לא בהכרח ידווחו) בשורה 2 של אלגוריתם SearchKdTree?אלו מהנקודות ידווחו על ידי הפרוצדורה ReportSubtree?(TODO)","code":""},{"path":"orthogonal-range-seach.html","id":"תחומים-שאינם-מלבניים.","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"תחומים שאינם מלבניים.","text":"שימו לב שניתן להכליל את אלגוריתם השאילתה גם עבור תחומים שאינם מלבניים. על מנת שהאלגוריתם יהיה יעיל עבור תחום R שאינו מלבני, התחום חייב להיות מתואר בצורה שתאפשר את שתי הפעולות הבאות בזמן קבוע:לבדוק האם R מכיל נקודה נתונה.לבדוק האם R מכיל או נחתך עם תחום מלבני המתאים לצומת כלשהו.אם R הוא מצולע קמור בעל c צלעות, כיצד נוכל לבצע את הפעולות האלו? ומה יהיה זמן הריצה? מה אם R הוא עיגול הנתון על ידי המרכז והרדיוס שלו?","code":""},{"path":"orthogonal-range-seach.html","id":"range-trees","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"5.2.2 עצי תחומים (Range Trees)","text":"","code":""},{"path":"orthogonal-range-seach.html","id":"צפו-בסרטון-הבא-6","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"צפו בסרטון הבא:","text":"(TODO)מבחינת זמן השאילתה, במקרה הגרוע עץ תחומים יעיל הרבה יותר מעץ-kd - זמן השאילתה שלו הוא \\(O( log^2 n + k)\\) בלבד, לעומת \\(O( \\sqrt{n}+k)\\) בעצי-kd. השיפור הזה מאלץ אותנו לשלם מעט בסיבוכיות המקום – \\(O( n log n)\\) לעומת \\(O( n)\\). בסעיף 5.3 של ספר הלימוד מתואר האלגוריתם Build2DRangeTree שבונה את העץ, ואלגוריתם השאילתה 2DRangeQuery. קראו בעיון את ניתוח זמן הבניה, סיבוכיות המקום, וזמן השאילתה של עץ תחומים.","code":""},{"path":"orthogonal-range-seach.html","id":"קראו-את-סעיף-5.3-בספר-עמודים-105109.","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"קראו את סעיף 5.3 בספר (עמודים 105–109).","text":"","code":""},{"path":"orthogonal-range-seach.html","id":"שיפור-זמן-השאילתה.","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"שיפור זמן השאילתה.","text":"ניתן לשפר את זמן השאילתה של עץ התחומים בפקטור של log n, בעזרת שיטה הנקראת Fractional Cascading . זוהי שיטה מתקדמת שאינה חלק מחומר הקורס, והיא מתוארת בפרק 5.6 של הספר.","code":""},{"path":"orthogonal-range-seach.html","id":"extensions","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"5.3 הרחבות","text":"","code":""},{"path":"orthogonal-range-seach.html","id":"higher-dim","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"5.3.1 מימדים גבוהים","text":"בשתי הפסקאות האחרונות של סעיף 5.2 בספר הלימוד מתוארת בקצרה הבנייה של עצי-kd במימד \\(d>2\\). עבור \\(d\\) קבוע, זמן הבניה נשאר \\(O( n \\log n)\\) וסיבוכיות הזיכרון נשארת \\(O( n)\\). זמן השאילתה לעומת זאת הוא \\(O( n^{1-\\frac{1}{d}}+k)\\), והוא מתקרב ל-\\(O( n)\\) ככל ש-\\(d\\) גדל. בפרק 5.4 מתוארת הרחבה של עצי תחומים למימד \\(d>2\\). כאן זמן העיבוד המקדים וסיבוכיות המקום הם \\(O( n \\log^{d-1} n)\\), וזמן השאילתה הוא \\(O( \\log^d n +k)\\).","code":""},{"path":"orthogonal-range-seach.html","id":"קראו-את-סעיף-5.4-בספר-עמודים-109110.","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"קראו את סעיף 5.4 בספר (עמודים 109–110).","text":"","code":""},{"path":"orthogonal-range-seach.html","id":"general-pos","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"5.3.2 אוסף נקודות כללי","text":"בפרקים 5.1־5.3 של ספר הלימוד אנו מניחים שאין באוסף הנתון שתי נקודות בעלות אותה קואורדינטת \\(x\\) או אותה קואורדינטת \\(y\\). זוהי הנחה שאינה מתיישבת עם המציאות, מכיוון ששדות בטבלה עשויים לייצג ערכים בעלי מספר קטן של אפשרויות, כמו גיל או תאריך, ולכן סביר שיהיו המון נקודות בעלות ערכים זהים באותה קואורדינטה. למרבה המזל, הכללת מבני הנתונים שראינו עבור קלט כללי היא לא משימה קשה, וניתן לעשות זאת על ידי בחירה של סדר לקסיגורפי מסוים על הנקודות. תוכלו לקרוא על כך בפרק 5.5 של ספר הלימוד.","code":""},{"path":"orthogonal-range-seach.html","id":"קראו-את-סעיף-5.5-בספר-עמודים-110111.","chapter":"יחידה 5 חיפוש בתחומים אורתוגונלים","heading":"קראו את סעיף 5.5 בספר (עמודים 110–111).","text":"","code":""},{"path":"point-location.html","id":"point-location","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"יחידה 6 מיקום נקודה ומפה טרפזית","text":"","code":""},{"path":"point-location.html","id":"preface","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"6.1 הקדמה","text":"","code":""},{"path":"point-location.html","id":"point-on-map","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"6.1.1 מיקום נקודה במפה","text":"","code":""},{"path":"point-location.html","id":"קראו-את-ההקדמה-לפרק-6-בספר-הלימוד-עמודים-121122.","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"קראו את ההקדמה לפרק 6 בספר הלימוד (עמודים 121־122).","text":"","code":""},{"path":"point-location.html","id":"trapezoidal-map","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"6.2 מפה טרפזית","text":"","code":""},{"path":"point-location.html","id":"naive-sol","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"6.2.1 פתרון נאיבי: חלוקה לרצועות","text":"תהי \\(\\mathcal{S}\\) מפה מישורית, כפי שהגדרנו ביחידה 2 של הקורס: \\(\\mathcal{S}\\) היא שיכון של גרף מישורי במישור, כך שכל הצלעות שלו הן קטעים ישרים.\nנרצה לבנות מבנה נתונים שיענה על שאילתות מהסוג הבא: בהינתן נקודה \\(q\\) במישור, מצא את הפאה בה \\(q\\) נמצאת. שימו לב שכדי למצוא את הפאה בה \\(q\\) נמצאת, מספיק לבדוק (למשל) איזו צלע של \\(\\mathcal{S}\\) הנקודה \\(q\\) “רואה” מעליה.\nלכן, בחלק הראשון של סעיף 6.1 בספר הלימוד מתואר פתרון נאיבי ופשוט לבעיה, על ידי חלוקה של המפה לרצועות (slabs): נעביר ישר אנכי דרך כל אחד מהקודקודים של \\(\\mathcal{S}\\). האיזור שנמצא בין שני ישרים עוקבים כאלו הוא רצועה אנכית.\nבהינתן שמספר הקודקודים במפה \\(\\mathcal{S}\\) הוא n, ניתן למצוא את הרצועה שבה נמצאת נקודה נתונה \\(q\\) בזמן \\(O (\\log n )\\) על ידי חיפוש בינארי.\nמכיוון שאין קודקודים של \\(\\mathcal{S}\\) בתוך הרצועה, נוכל למצוא את הצלע שהנקודה \\(q\\) “רואה” מעליה על ידי חיפוש בינארי על פני הקטעים שחותכים את הרצועה, כלומר שוב \\(O (\\log n )\\).בדרך זו, זמן השאילתה שנקבל הוא \\(O (\\log n )\\), אך מהו גודל המבנה וזמן העיבוד המקדים?\nבאיור למטה ניתן לראות דוגמה למקרה בו גודל המבנה יהיה \\(\\Theta ( n^2 )\\) (מדוע?).\n","code":""},{"path":"point-location.html","id":"קראו-את-חלקו-הראשון-של-סעיף-6.1-בספר-הלימוד-עמודים-122124.","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"קראו את חלקו הראשון של סעיף 6.1 בספר הלימוד (עמודים 122–124).","text":"","code":""},{"path":"point-location.html","id":"פירוק-לטרפזים","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"6.2.2 פירוק לטרפזים","text":"שימו לב שהחלוקה לרצועות שראינו בעמוד הקודם יוצרת מפה מישורית \\(\\mathcal{S'}\\) שבה כל פאה היא טרפז או משולש (או פאה אינסופית דמויית טרפז/משולש).\nהמפה \\(\\mathcal{S'}\\) היא עידון (refinement) של המפה המקורית \\(\\mathcal{S}\\), כלומר, כל פאה של \\(\\mathcal{S'}\\) מוכלת לחלוטין בפאה של \\(\\mathcal{S}\\), ולכן אם מצאנו שנקודת השאילתה נמצאת בפאה מסויימת של \\(\\mathcal{S'}\\), נוכל לדעת לאיזו פאה של \\(\\mathcal{S}\\) היא שייכת.\nהעידון בעזרת חלוקה לרצועות מוביל למבנה נתונים בגודל ריבועי (במקרה הגרוע), ולכן אינו מעשי.\nבחלק זה נראה עידון אחר שסיבוכיות הזיכרון שלו לא תהיה גדולה בהרבה מזו של \\(\\mathcal{S}\\), ועדיין יאפשר לנו לענות על שאילתות מיקום נקודה בקלות יחסית.","code":""},{"path":"point-location.html","id":"צפו-בסרטון-הבא-7","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"צפו בסרטון הבא:","text":" מיהי ה-\\(leftp\\) של כל אחד מהטרפזים המסומנים באיור?\n(TODO)\n","code":""},{"path":"point-location.html","id":"הנחת-מצב-כללי.","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"הנחת מצב כללי.","text":"בשיטת הפירוק לטרפזים אנחנו מניחים שבאוסף הקטעים הנתון אין שתי נקודות קצה בעלות אותה קואורדינטת \\(x\\).\nהנחה זו אינה ריאליסטית, אך כפי שכבר ראינו בעבר, קיימות מספר שיטות המאפשרות לנו לטפל במצב לא כללי - למשל על ידי סיבוב המישור, או קביעת סדר לקסיקוגרפי.\nהדיון בפתרונות אלו עבור המבנה של מפת טרפזים מופיע בפרק 6.3 בספר הלימוד.\\(\\Theta(n)\\)","code":""},{"path":"point-location.html","id":"לחזרה-קראו-את-חלקו-השני-של-סעיף-6.1-בספר-עמודים-124128.","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"לחזרה: קראו את חלקו השני של סעיף 6.1 בספר (עמודים 124–128).","text":"","code":""},{"path":"point-location.html","id":"point-location-queries","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"6.3 שאילתות מיקום נקודה","text":"","code":""},{"path":"point-location.html","id":"the-data-structure","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"6.3.1 מבנה הנתונים","text":"יהי \\(\\mathcal{S}\\) אוסף של \\(n\\) קטעים במצב כללי שאינם נחתכים.ניתן לבנות את המפה הטרפזית \\(\\mathcal{T}(\\mathcal{S})\\) בקלות יחסית על ידי שימוש בשיטת הישר הסורק (חישבו, כיצד?).\nהבעיה היא, שבשיטה זו לא נוכל לבנות מבנה נתונים התומך בשאילתות מיקום נקודה, שהוא המטרה המרכזית שלנו ביחידה זו.\nאיך יראה מבנה נתונים כזה?בחלק זה נתאר את מבנה החיפוש \\(\\mathcal{D}\\) שיאפשר לנו לבצע שאילתות מיקום נקודה במפה הטרפזית \\(\\mathcal{D}\\).\nבהמשך, נראה אלגוריתם אינקרמטלי-רנדומי שבונה את המפה הטרפזית \\(\\mathcal{T}(\\mathcal{S})\\) ומבנה הנתונים \\(\\mathcal{D}\\) גם יחד.מבנה הנתונים \\(\\mathcal{D}\\) יהיה גרף מכוון חסר מעגלים (DAG), עם שלושה סוגים של צמתים:צומת (פנימי) x - מתאים לנקודת קצה של קטע מ-\\(\\mathcal{S}\\) (מסומן בעיגול לבן).צומת (פנימי) y - מתאים לקטע מ-\\(\\mathcal{S}\\) (מסומן בעיגול אפור).עלה - מתאים לטרפז במפה \\(\\mathcal{T}(\\mathcal{S})\\) (מסומן בריבוע).בנוסף, לגרף יש שורש יחיד, ובדיוק עלה אחד לכל טרפז במפה \\(\\mathcal{D}\\).\nבאיור למשל, לעלה של טרפז C יש מצביעים משני קודקודים פנימיים.הרעיון בבנייה זו דומה לעצי-kd שראינו ביחידה 5: לכל צומת פנימי, ההסתעפות ימינה או שמאלה תלויה בתשובה לשאלה המתאימה לסוג הצומת.\nבהינתן נקודת שאילתה q, נתחיל את החיפוש מהשורש עד שנגיע לעלה:אם הגענו לצומת-\\(x\\) המתאים לנקודת קצה \\(p\\), נשאל: “האם \\(q\\) מימין או משמאל לישר האנכי שעובר דרךp?”. אם התשובה היא “מימין” - נמשיך ימינה, אחרת שמאלה.אם הגענו לצומת-\\(y\\) המתאים לקטע \\(s\\), נשאל: “האם \\(q\\) מעל או מתחת לקטע \\(s\\)?”. אם התשובה היא “מתחת” - נמשיך ימינה, אחרת שמאלה. שימו לב שכדי שהשאלה הזו תהיה הגיונית, נצטרך להבטיח שבשלב זה הישר האנכי שעובר דרך \\(q\\) חותך את \\(s\\).כשנגיע לעלה, נבדוק האם הטרפז המתאים לו מכיל אתq.\nידוע שנקודת שאילתה נמצאת:מימין לישר האנכי העובר בנקודה \\(p_1\\).משמאל לישר האנכי העובר בנקודה \\(q_1\\).מתחת לקטע \\(s_1\\).באילו מהטרפזים יתכן שהנקודה נמצאת?אם בנוסף ידוע שהנקודה נמצאת:משמאל לישר האנכי העובר בנקודה \\(q_2\\).מעל לקטע \\(s_2\\).באילו מהטרפזים יתכן שהנקודה נמצאת?TBD","code":""},{"path":"point-location.html","id":"rand-inc-alg","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"6.3.2 אלגוריתם אינקרמנטלי רנדומי","text":"בחלק זה נתאר אלגוריתם אינקרמנטלי לבניית מבנה החיפוש \\(\\mathcal{D}\\) והמפה הטרפזית \\(\\mathcal{T}(\\mathcal{S})\\) גם יחד.\nהאלגוריתם מוסיף את הקטעים מהאוסף \\(\\mathcal{S}\\) אחד אחרי השני בסדר רנדומי, ובכל פעם מעדכן את מבנה החיפוש והמפה בהתאם לקטע החדש שנוסף.הסיבה לכך שנבחר סדר רנדומי על הקטעים היא שבאופן זה נוכל לצפות לזמני ריצה וסיבוכיות מקום יעילים, בדומה לאלגוריתם האינקרמנטלי-רנדומי לתכנון לינארי במישור שראינו ביחידה 4 של הקורס.\nנדון בכך בעמוד הבא של חלק זה.","code":""},{"path":"point-location.html","id":"צפו-בסרטון-הבא-8","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"צפו בסרטון הבא:","text":"","code":""},{"path":"point-location.html","id":"קראו-את-חלקו-הראשון-של-סעיף-6.2-בספר-עמודים-128133.","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"קראו את חלקו הראשון של סעיף 6.2 בספר (עמודים 128–133).","text":"\nמי הם הטרפזים שהאלגוריתם ימצא ויעדכן כאשר נוסיף את s_i?\n\n\n","code":""},{"path":"point-location.html","id":"alg-analysis","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"6.3.3 ניתוח האלגוריתם","text":"הסדר בו האלגוריתם TrapezoidalMap מוסיף את הקטעים משפיע מאוד על גודל מבנה החיפוש \\(\\mathcal{D}\\) ועל זמן השאילתה.\nלמעשה, יתכן סידור שבו האלגוריתם ירוץ בזמן ריבועי, סיבוכיות הזיכרון של \\(\\mathcal{D}\\) תהיה ריבועית, וזמן השאילתה יהיה לינארי.\nלכן, בדומה לאלגוריתם האינקרמנטלי-רנדומי לתכנון לינארי במישור שראינו ביחידה 4 של הקורס, גם כאן האלגוריתם מגריל את סדר הוספת הקטעים מראש, ונוכל להראות שבתוחלת יתקבל מבנה חיפוש עם סיבוכיות זיכרון לינארית, וזמן שאילתה צפוי \\(O (\\log n )\\). מהו המקרה הגרוע ביותר?\nנסו לתאר דוגמה לאוסף של \\(n\\) קטעים וסידור שלהם, כך שהאלגוריתם האינקרמנטלי (הלא רנדומי) ירוץ בזמן \\(O ( n^2 )\\).","code":""},{"path":"point-location.html","id":"רעיון-ההוכחה-זמן-השאילתה.","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"רעיון ההוכחה (זמן השאילתה).","text":"תהי \\(q\\) נקודת שאילתה.\nנרצה להעריך את תוחלת אורך המסלול שנעבור במבנה \\(\\mathcal{D}\\) כאשר נחפש את הטרפז שמכיל את \\(q\\) (מספר הצמתים מהשורש לטרפז).\nלשם כך, ננסה להבין כיצד משתנה המסלול במהלך ריצת אלגוריתם הבנייה של \\(\\mathcal{D}\\).למשל, ניתן להראות שבכל פעם שקטע חדש נוסף למבנה, אורך המסלול יגדל בלכל היותר 3 צמתים.\nלפיכך ניתן לומר שאורך המסלול הוא לכל היותר .\nזהו חסם עבור המקרה הגרוע, אך אנו מעוניינים במקרה הממוצע (על פני כל \\(n!\\) הסידורים האפשריים), ולכן ננסה לחשב את ממוצע מספר הצמתים שנוספו למסלול בכל איטרציה של האלגוריתם.נסמן ב-\\(X_i\\) (עבור \\(1 \\le \\le n\\)) את מספר הצמתים על המסלול שנוספו באיטרציה ה-\\(\\) (כלומר, לאחר הוספת הקטע \\(s_i\\)).\nכלומר, \\(X_i\\) הוא משתנה מקרי התלוי בסדר הוספת הקטעים, ולכן תוחלת אורך המסלול אל הטרפז המכיל את \\(q\\) היא \\(E[ \\sum_{=1}^{n} X_i ]\\) ומלינאריות התוחלת \\(\\sum_{=1}^{n} E[X_i]\\).מכיוון שבכל איטרציה נוספים לכל היותר 3 צמתים למסלול, מתקיים \\(X_i \\le 3\\).\nלכן, אם נסמן ב-\\(P_i\\) את ההסתברות לכך שקיים צומת במסלול שנוצר באיטרציה ה-\\(\\), נקבל \\(E[ X_i ] \\le 3 P_i\\).האבחנה המרכזית בהוכחה היא שבאינטרציה ה-\\(\\) נוסף קודקוד למסלול שלנו רק אם הטרפז שמכיל את \\(q\\) בדיוק לפני הוספת \\(s_i\\) שונה מהטרפז המכיל את \\(q\\) מיד לאחר הוספת \\(s_i\\).\nלכן, בדומה להוכחה שראינו ביחידה 4, נוכל לנתח את ההסתברות לכך שהטרפז המכיל את \\(q\\) משתנה בין האיטרציה ה-\\(- 1\\) לאיטרציה ה-\\(\\) בשיטת הניתוח לאחור (backward analysis).\nכלומר, נסתכל על המפה שהתקבלה מיד לאחר הוספת \\(s_i\\), ונשאל מה ההסתברות לכך שהטרפז \\(\\Delta\\) המכיל את \\(q\\) במפה זו יעלם אם נוציא את \\(s_i\\).\nשימו לב שהטרפז \\(\\Delta\\) יעלם אם ורק אם אחד מהשדות המגדירים אותו (\\(top(\\Delta)\\) , \\(bottom(\\Delta)\\) , \\(leftp(\\Delta)\\) , \\(rightp(\\Delta)\\)) יעלם.\nההסתברות לכך ש-\\(s_i\\) הוא הקטע שמגדיר את \\(top(\\Delta)\\) למשל, היא 1 , ובאופן דומה ניתן לחשב זאת עבור \\(bottom(\\Delta)\\), \\(leftp(\\Delta)\\) , \\(rightp(\\Delta)\\).\nלכן, נקבל \\(P_i \\le \\frac{4}{}\\), ונוכל לחשב שתוחלת אורך המסלול היא \\(O (\\log n )\\).","code":""},{"path":"point-location.html","id":"קראו-את-חלקו-השני-של-סעיף-6.2-בספר-עמודים-133137.","chapter":"יחידה 6 מיקום נקודה ומפה טרפזית","heading":"קראו את חלקו השני של סעיף 6.2 בספר (עמודים 133–137).","text":"","code":""},{"path":"voronoi.html","id":"voronoi","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"יחידה 7 דיאגרמת וורונוי","text":"","code":""},{"path":"voronoi.html","id":"preface","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.1 הקדמה","text":"","code":""},{"path":"voronoi.html","id":"nns","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.1.1 בעיית השכן הקרוב ביותר (או: בעיית מיקום הסניפים)","text":"","code":""},{"path":"voronoi.html","id":"קראו-את-ההקדמה-לפרק-7-בספר-הלימוד-עמודים-147148.","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"קראו את ההקדמה לפרק 7 בספר הלימוד (עמודים 147־148).","text":"","code":""},{"path":"voronoi.html","id":"basic-prop","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.2 הגדרה ותכונות בסיסיות","text":"","code":""},{"path":"voronoi.html","id":"Voronoi-vid","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.2.1 מהי דיאגרמת וורונוי?","text":"בסרטון הבא נגדיר את דיאגרמת וורונוי באופן פורמלי, ונתאר מספר תכונות שלה. בסעיפים הבאים של חלק זה תוכלו למצוא את כל ההגדרות, האבחנות, והמשפטים המופיעים בסרטון, כך שתוכלו לחזור אליהם בעת הצורך.","code":""},{"path":"voronoi.html","id":"צפו-בסרטון-הבא.-5","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"צפו בסרטון הבא.","text":"\n\n\n","code":""},{"path":"voronoi.html","id":"def","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.2.2 הגדרות","text":"תהי \\(P=(p_1,\\dots,p_n)\\) קבוצה של \\(n\\) נקודות במישור.הגדרה: דיאגרמת וורונוי\nדיאגרמת וורונוי של הקבוצה \\(P\\) היא חלוקה של המישור ל-\\(n\\) תאים, אחד לכל נקודה של \\(P\\), כך שנקודה \\(q\\) שייכת לתא שמתאים לנקודה \\(p_i\\) אם ורק אם \\(\\|p_i-q\\|<\\|p_j-q\\|\\) לכל \\(p_j\\P\\), \\(j\\neq \\).נסמן ב-\\(\\text{Vor(P)}\\) את דיאגרמת וורונוי של הקבוצה \\(P\\), ועבור נקודה \\(p_i\\P\\) נסמן ב-\\(\\mathcal{V}(p_i)\\) את התא בדיאגרמה המתאים ל-\\(p_i\\).נניח שנתונות לנו שתי נקודות בלבד, \\(p_1,p_2\\). כיצד תראה הדיאגרמה במקרה זה?הגדרה: bisector\nעבור שתי נקודות \\(p_1\\) ו-\\(p_2\\), האנך האמצעי לקטע \\(\\overline{p_1p_2}\\) נקרא ה-bisector של \\(p_1\\) ו-\\(p_2\\).\nשימו לב שכל נקודה שנמצאת על ה-bisector היא במרחק שווה מ-\\(p_1\\) ו-\\(p_2\\) (חישבו, מדוע?).ה-bisector של \\(p_1\\) ו-\\(p_2\\) מחלק את המישור לשני חצאי מישור. נסמן ב-\\(h(p_1,p_2)\\) את חצי המישור הפתוח שמכיל את \\(p_1\\). כל נקודה הנמצאת ב-\\(h(p_1,p_2)\\), קרובה יותר ל-\\(p_1\\) מאשר ל-\\(p_2\\).","code":""},{"path":"voronoi.html","id":"prop","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.2.3 תכונות הדיאגרמה","text":"","code":""},{"path":"voronoi.html","id":"כיצד-נראה-תא-וורונוי","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"כיצד נראה תא וורונוי?","text":"האבחנות שראינו למעלה מובילות אותנו לאבחנה הבאה לגבי המבנה של תא בדיאגרמת וורונוי:","code":""},{"path":"voronoi.html","id":"כיצד-נראית-הדיאגרמה-כולה","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"כיצד נראית הדיאגרמה כולה?","text":"מכיוון שכל תא בדיאגרמה הוא חיתוך של חצאי מישורים, דיאגרמת וורונוי תהיה חלוקה של המישור שהצלעות שלה הן ישרים, חצאי ישרים, או קטעים. צלעות שהן ישרים (כלומר כאלו שאינן חסומות משני הצדדים) יתקבלו רק במקרה בו כל הנקודות נמצאות על ישר אחד. בספר תראו את ההוכחה המלאה למשפט הבא:משפט: אם כל נקודות \\(P\\) נמצאות על ישר אחד אז \\(\\text{Vor(P)}\\) מורכבת מ-\\(n-1\\) ישרים מקבילים. אחרת, \\(\\text{Vor(P)}\\) קשירה, והצלעות שלה הן קטעים או חצאי ישרים (קרניים).","code":""},{"path":"voronoi.html","id":"סיבוכיות-הדיאגרמה.","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"סיבוכיות הדיאגרמה.","text":"שימו לב שהסיבוכיות של תא בודד בדיאגרמה עשויה להיות \\(\\Theta(n)\\), כמו למשל באיור הבא.מה הסיבוכיות של כל הדיאגרמה? על ידי שימוש בנוסחת אוילר, והעובדה שהדרגה המינימלית של קודקוד בדיאגרמה היא 3, ניתן להוכיח שהסיבוכיות של \\(\\text{Vor}(P)\\) היא \\(O(n)\\) (ההוכחה המלאה מופיעה בספר הלימוד).משפט: הסיבוכיות של \\(\\text{Vor(P)}\\) היא \\(O(n)\\).","code":""},{"path":"voronoi.html","id":"תכונת-המעגל-הריק.","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"תכונת המעגל הריק.","text":"תכונת המעגל הריק מאפשרת לנו להבין טוב יותר מיהם האנכים האמצעיים שנקודת החיתוך ביניהם היא קודקוד של הדיאגרמה. עבור נקודה \\(q\\), נגדיר את \\(C_P(q)\\) להיות המעגל הגדול ביותר שמרכזו ב-\\(q\\) והוא ריק (בפנימו) מנקודות \\(P\\). המשפט הבא הוא אפיון חשוב של דיאגרמת וורונוי, שיאפשר לנו בהמשך לבנות אותה ביעילות. ההוכחה המלאה מופיעה כמובן בספר הלימוד.משפט:נקודה \\(q\\) היא קודקוד של \\(\\text{Vor(P)}\\) אם ורק אם \\(C_P(q)\\) מכיל לפחות שלוש נקודות של \\(P\\) על שפתו.ה-bisector של \\(p_i\\) ו-\\(p_j\\) מגדיר צלע של \\(\\text{Vor(P)}\\) אם ורק אם קיימת נקודה \\(q\\) על ה-bisector כך ש-\\(C_P(q)\\) מכיל את \\(p_i\\) ו-\\(p_j\\) על שפתו, ואינו מכיל אף נקודה אחרת של \\(P\\) על שפתו.","code":""},{"path":"voronoi.html","id":"קראו-את-סעיף-7.1-בספר-הלימוד-עמודים-148151.","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"קראו את סעיף 7.1 בספר הלימוד (עמודים 148־151).","text":"","code":""},{"path":"voronoi.html","id":"computing-VD","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.3 חישוב הדיאגרמה","text":"","code":""},{"path":"voronoi.html","id":"beach-line","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.3.1 סריקת קו החוף","text":"\nהאבחנה שראינו בחלק הקודם לגבי המבנה של תא וורונוי מובילה לאלגוריתם פשוט למדי לחישוב הדיאגרמה. נוכל לחשב לכל אתר \\(p_i\\) את החיתוך של חצאי המישורים \\(h(p_i,p_j)\\) לכל \\(j\\neq \\) בעזרת האלגוריתם שראינו בפרק 4, וכך נקבל את התא המתאים ל-\\(p_i\\). כך החישוב של כל תא יהיה בזמן \\(O(n\\log n)\\), וסך כל זמן הריצה יהיה \\(O(n^2 \\log n)\\). האם ניתן להשיג זמן טוב יותר? אחרי הכל, הסיבוכיות של דיאגרמת וורונוי היא לינארית….\nבסרטון הבא נתאר רעיון לחישוב דיאגרמת וורונוי בעזרת אלגוריתם סורק.","code":""},{"path":"voronoi.html","id":"צפו-בסרטון-הבא.-6","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.3.1.1 צפו בסרטון הבא.","text":"","code":""},{"path":"voronoi.html","id":"Fortune-alg","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.3.2 האלגוריתם הסורק של Fortune","text":"בסעיף 7.2 של ספר הלימוד מתואר בפירוט האלגוריתם הסורק של Fortune לבניית דיאגרמת וורונוי. זהו אלגוריתם בסיסי וחשוב ביותר בתחום הגאומטריה חישובית. זמן הריצה שלו הוא \\(O(n\\log(n)\\) בלבד, והוא אופטימלי. בקורס זה נדלג על הפרטים והמימוש של האלגוריתם, ונסתפק בתיאור הרעיון הכללי שראינו בסעיף הקודם, ובציטוט המשפט הבא:משפט: ניתן לחשב את דיאגרמת וורונוי של קבוצת נקודות בגודל \\(n\\) בזמן \\(O(n\\log(n)\\).","code":""},{"path":"voronoi.html","id":"הדגמה.","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"הדגמה.","text":"הסרטון הבא (מאת Kevin Schaal) מציג אנימציה נהדרת הממחישה את אופן פעולת האלגוריתם:\n","code":""},{"path":"voronoi.html","id":"למעוניינים-בפרטי-האלגוריתם-הוכחות-מלאות-ואופן-המימוש-קראו-את-סעיף-7.2-בספר-הלימוד-עמודים-151159.","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"למעוניינים בפרטי האלגוריתם, הוכחות מלאות, ואופן המימוש: קראו את סעיף 7.2 בספר הלימוד (עמודים 151־159).","text":"","code":""},{"path":"voronoi.html","id":"extensions","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.4 הכללות והרחבות","text":"","code":""},{"path":"voronoi.html","id":"beyond-Euclid","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.4.1 מֵעֵבֶר למישור האוקלידי","text":"בחלקים הקודמים הגדרנו את דיאגרמת וורונוי עבור אוסף של נקודות במישור תחת מטריקת \\(L_2\\), כלומר, המרחק האוקלידי. זהו בעצם מקרה פשוט של רעיון הרבה יותר כללי ומופשט; באופן כללי, דיאגרמת וורונוי מתארת חלוקה של המרחב לתאים, לפי המרחק לאובייקטים מאוסף נתון. ראו למשל את ההגדרה הפורמלית של דיאגמת וורונוי המופיעה בויקיפדיה (עבור מרחבים מטריים).הכללה אחת שניתן לעשות נוגעת למרחב שבו נמצאים האתרים. הדוגמה הפשוטה ביותר להכללה כזו היא עבור נקודות במימדים גבוהים מ-2. עבור נקודות ממימד \\(d\\), הסיבוכיות של הדיאגרמה יכולה להגיע ל-\\(\\Theta(n^{\\lceil d/2\\rceil})\\), וניתן לחשב אותה בזמן \\(O(n\\log n+n^{\\lceil d/2\\rceil})\\).\nהכללה אחרת נוגעת לפונקצית המרחק: במקום מרחק אוקלידי, נוכל להשתמש בפונקצית מרחק אחרת בין הנקודות. למשל, מרחק \\(L_1\\) (שנקרא גם “מרחק מנהטן”) בין שתי נקודות \\(p\\) ו-\\(q\\) מוגדר להיות\n\\[\\|p-q\\|_1:=|p_x-q_x|+|p_y-q_y\\|.\\]\nבמקרה הזה כל צלעות הדיאגרמה יהיו אופקיות, אנכיות, או בעלות זוית של 45 מעלות בלבד.הכללה נוספת של הדיאגרמה נוגעת לאתרים עצמם: במקום אוסף של נקודות, נוכל להגדיר את קבוצת האתרים להיות אוסף של אובייקטים, כלומר, אוסף של תתי קבוצות של נקודות מהמרחב. דוגמה אחת שמופיעה בספר לשימוש בהכללה הזו, היא כאשר האובייקטים האלו הם קטעים. המרחק בין נקודה \\(q\\) לקטע \\(s\\) מוגדר להיות המרחק (האוקלידי) בין \\(q\\) לנקודה על \\(s\\) שקרובה אליה ביותר. תוכלו לקרוא על כך בסעיף 7.3 של ספר הלימוד.","code":""},{"path":"voronoi.html","id":"other-defs","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.4.2 הרחבות נוספות","text":"דיאגרמת וורונוי מוגדרת לפי המרחק לאתר הקרוב ביותר. ניתן להכליל את ההגדרה הזו במספר דרכים שונות, וגם כאן נזכיר בקצרה שתיים מהן.","code":""},{"path":"voronoi.html","id":"דיאגרמת-וורונוי-ממושקלת","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"דיאגרמת וורונוי ממושקלת","text":"כאן, בנוסף לאוסף האתרים \\(P=(p_1,\\dots,p_n)\\), נתון לנו גם אוסף של משקלים \\(W=(w_1,\\dots,w_n)\\), כך שמשקל המתאים ל-\\(p_i\\) הוא \\(w_i\\). השינוי בהגדרה של הדיאגרמה הוא בפונקציה המרחק: נקודה \\(q\\) שייכת לתא שמתאים לנקודה \\(p_i\\) אם ורק אם\n\\(\\|p_i-q\\|+w_i<\\|p_j-q\\|+w_j\\) לכל \\(p_j\\P\\), \\(j\\neq \\).\nשימו לב שאם כל המשקלים הם 0, אז מדובר בבעיה המקורית.ניתן לחשוב על מספר סיטואציות מהעולם האמיתי בהן יש צורך בהוספת משקלים, למשל כאשר כל אתר מסמל מרכז קניות שלם, וכל מרכז קניות הוא אטרקטיבי במידה שונה.","code":""},{"path":"voronoi.html","id":"דיאגרמת-וורונוי-מסדר--k.","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"דיאגרמת וורונוי מסדר- k.","text":"עבור קבוצת אתרים \\(P=(p_1,\\dots,p_n)\\) ומספר \\(1\\le k\\le n-1\\), דיאגרמת וורוני מסדר \\(k\\) היא חלוקה של המישור לתאים, כך שכל תא מזוהה עם תת קבוצה בגודל \\(k\\) של אתרים מ-\\(P\\), ונקודה שייכת לתא המזוהה עם קבוצה\n\\(\\{p_{i_1},\\dots,p_{i_k}\\}\\)\nאם ורק אם אלו הם\n\\(k\\) האתרים הקרובים אליה ביותר מבין כל האתרים ב-\\(P\\).\nלמשל, עבור \\(k=2\\) כל תא מזוהה עם זוג נקודות, ונקודת \\(q\\) שייכת לתא של \\(p_i,p_j\\) אם לא קיים אתר אחר ב-\\(P\\) שקרוב אליה יותר מ-\\(p_i\\) או \\(p_j\\).מקרה מעניין במיוחד הוא עבור \\(k=n-1\\): במקרה זה כל תא מזוהה עם \\(n-1\\) נקודות, ובאופן שקול, כל תא מזוהה עם נקודה אחת (היחידה שאינה בקבוצה), ונקודה \\(q\\) שייכת לתא של \\(p_i\\) אם \\(p_i\\) היא הנקודה הרחוקה ביותר ממנה מבין נקודות \\(P\\). בהתאם, המקרה הזה נקרא Farthest-Point Voronoi Diagram, או בקיצור דיאגרמת FPV. באיור למטה, ניתן לראות דוגמה לדיאגרמת FPV של קבוצת נקודות. האם תצליחו לזהות איזה תא מתאים לאיזו נקודה?תוכלו לקרוא עוד על דיאגרמת FPV בסעיף 7.4 בספר הלימוד.","code":""},{"path":"voronoi.html","id":"voronoi-game","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.5 בונוס: משחק וורונוי","text":"","code":""},{"path":"voronoi.html","id":"משחק-וורונוי-על-ריבוע","chapter":"יחידה 7 דיאגרמת וורונוי","heading":"7.5.1 משחק וורונוי על ריבוע","text":"\nבמשחק וורונוי יש שני שחקנים, הכחול והאדום, והלוח הוא ריבוע במישור. השחקנים משחקים בתורות במשך \\(k\\) סבבים, כאשר האדום משחק ראשון והכחול שני. כל שחקן בתורו בוחר נקודה על הלוח, ואז בונים את דיאגרמת וורונוי של כל הנקודות שנבחרו, ומחשבים את סכום השטחים של תאי וורונוי האדומים ושל תאי וורונוי הכחולים. המנצח הוא זה שבסוף המשחק הצליח להשיג שטח גדול יותר.שאלה מעניינת למחקר היא: למי מהם יש אסטרטגיה מנצחת, ומהי? שאלה נוספת: בהינתן מצב של הלוח, באיזו נקודה כדאי לבחור על מנת למקסם את הרווח? ואיך ניתן לחשב זאת בזמן יעיל? ניתן לחשוב גם מה קורה כשלוח המשחק הוא לאו דווקא ריבוע; למשל, מה קורה כאשר לוח המשחק הוא פוליגון? או גרף?ניתן לשחק במשחק וורונוי בסימולציה מאת Frederik Brasz.","code":""},{"path":"duality-arrangements.html","id":"duality-arrangements","chapter":"יחידה 8 מערכים ודואליות","heading":"יחידה 8 מערכים ודואליות","text":"","code":""},{"path":"Delaunay-triangulation.html","id":"Delaunay-triangulation","chapter":"יחידה 9 שילושי דלוני","heading":"יחידה 9 שילושי דלוני","text":"","code":""},{"path":"motion-planning.html","id":"motion-planning","chapter":"יחידה 10 תכנון תנועה","heading":"יחידה 10 תכנון תנועה","text":"","code":""},{"path":"WSPD-spanners.html","id":"WSPD-spanners","chapter":"יחידה 11 פורשים גאומטריים וקבוצות מופרדות היטב","heading":"יחידה 11 פורשים גאומטריים וקבוצות מופרדות היטב","text":"","code":""},{"path":"curve-similarity.html","id":"curve-similarity","chapter":"יחידה 12 דמיון בין עקומים","heading":"יחידה 12 דמיון בין עקומים","text":"","code":""}]
