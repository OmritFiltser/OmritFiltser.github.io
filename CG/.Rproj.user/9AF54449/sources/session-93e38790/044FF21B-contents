# מבוא 

## הקדמה

### **מהי גאומטריה חישובית?** {.unnumbered}

גאומטריה חישובית היא תחום מחקר במדעי המחשב העוסק בפיתוח של כלים, מודלים, מבני נתונים, ואלגוריתמים, המיועדים לפתרון בעיות חישוב גאומטריות. המחקר התיאורטי בגאומטריה חישובית מיושם בתחומים רבים ומגוונים. בסרטון הבא נספר איך נולד התחום, ונציג מספר דוגמאות לבעיות שבהן נעסוק במהלך הקורס.

#### **צפו בסרטון הבא.** {.unnumbered}

<iframe width="560" height="315" src="https://www.youtube.com/embed/ALiuyo_TN5Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>

#### **מדדים להערכת טיב הפתרון** {.unnumbered}

פתרון לבעיה יכול להיות בצורה של אלגוריתם, המקבל קלט ומייצר פלט מתאים. במקרה זה טיב הפתרון נמדד ב**זמן הריצה** של האלגוריתם, וב**סיבוכיות הזיכרון** הנדרשת לפעולתו. 

כאשר הפתרון הוא בצורה של מבנה נתונים, קיים מדד נוסף, שהוא זמן העיבוד המקדים. לכן, בניתוח של מבנה נתונים נתייחס לכל אחד מהמדדים הבאים:

-   **זמן עיבוד מקדים (Preprocessing Time)** - הזמן שלוקח לנו לעבד את הקלט ולבנות את מבנה הנתונים.

-   **סיבוכיות מקום/זיכרון (Storage Space)** - גודל הזיכרון או נפח האחסון לו נזדקק עבור מבנה הנתונים.

-   **זמן שאילתה (Query Time)** - זמן הריצה של אלגוריתם השאילתה.

#### **קראו את ההקדמה לפרק 1 (עמודים 1--2).** {.unnumbered}

#### **תחומי יישום** {.unnumbered}

להרחבה על האפליקציות השונות והתפקיד שמשחקת בהן הגאומטריה החישובית, מומלץ לקרוא את פרק 1.3 בספר.

### **מאפיינים חשובים** {.unnumbered}

כמו בכל תחום מדעי, למחקר בגאומטריה חישובית יש מספר מאפיינים שהתקבעו כתוצאה מתחומי העניין והמומחיות של החוקרים בתחום. כאן נתאר את העיקריים שבהם.

#### **ריגורוזיות** {.unnumbered}

לפני שהתפתח המחקר בגאומטריה חישובית, היו המון היוריסטיקות ופתרונות אד הוק ליישומים גאומטרים. פתרונות כאלה נבדקו על ידי ביצוע ניסויים, ולכן היו בדרך כלל יעילים רק במצבים מסוימים, ולעיתים אף שגויים לחלוטין. לעומת זאת, תחום הגאומטריה החישובית התפתח כתחום מתמטי שבו הגישה לפתרון היא ריגורוזית: הבעיות מוגדרות היטב, וכל פתרון כולל הוכחת יעילות ונכונות מתמטית.

#### **מימד נמוך** {.unnumbered}

היסטורית, הגאומטריה החישובית התפתחה כתחום מחקר העוסק בבעיות על מרחבים ממימד אוקלידי נמוך (לרוב מרחב דו-מימדי, ולעיתים גם תלת מימדי). לכן לאורך הקורס אנו נתמקד בעיקר במרחב אוקלידי הדו-מימדי, $\mathbb{R}^2$ , שמכונה גם **המישור האוקלידי** (או בקיצור, המישור). רוב האלגוריתמים שנראה יעבדו רק בשניים או שלושה מימדים. אלגוריתמים שמתאימים גם למימדים גבוהים יותר סובלים במקרים רבים מתופעה שנקראת **"קללת המימד הגבוה"** (curse of high dimensionality), כלומר, זמן הריצה שלהם כולל פקטורים שגדלים אקספוננצילית במימד. עם זאת, לעיתים נדון גם באפשרות להרחבה למימדים גבוהים יותר, או בהבדלים הקיימים במעבר למימד גבוה יותר.

#### **קלט בדיד (דיסקרטי)** {.unnumbered}

תחום הגאומטריה החישובית מתמקד בבעיות בהן האובייקטים הנתונים הם **בדידים** בטבעם, למשל קבוצות סופיות של נקודות, ישרים, או מעגלים. קיימות אפליקציות רבות בהן האובייקטים הם **רציפים**, כמו למשל מרחב תלת מימדי המתאר את טמפרטורת האוויר באיזור מסוים. מכיוון שהחישוב בעזרת מחשב הוא **בדיד** בטבעו, במקרים כאלו נדרש תהליך של **דיסקרטיזציה**, המאפשר לקבל קירוב לפתרון הרציף. בקורס הזה נדבר על בעיות עם קלט בדיד, ולא נדון בתהליך הדיסקרטיזציה.

#### **המודל החישובי** {.unnumbered}

לפני שניגשים לניתוח יעילות של אלגוריתם, צריך להחליט באיזה מודל חישובי הוא פועל. המודל החישובי מגדיר את הקשר בין הקלט ופעולות האלגוריתם לבין ייצוגם ואופן חישובם במחשב. בתחום הגאומטריה החישובית מקובל להשתמש במודל מתמטי הנקרא **מודל RAM הממשי (real RAM)**. זהו מודל המבוסס על המודל המוכר של Random Access Machine, כלומר הגישה לתאי הזיכרון היא באמצעות מצביעים. אלגוריתמים לבעיות גאומטריות דורשים בדרך כלל חישובים על מספרים ממשיים, וכאשר מתרגמים אלגוריתמים אלו לתוכניות מחשב, המספרים המחושבים הם בעצם מקורבים, כתלות בדיוק המחשב. מודל זה מאפשר להזניח את בעיית שגיאות העיגול בייצוג המקורב של הממשיים: כל מספר ממשי ניתן לאחסון ביחידת זיכרון אחת, והמספרים הם מדויקים ולא מקורבים. כמו כן המודל מניח שהפעולות האריתמטיות (חיבור, חיסור, כפל, וחילוק), וכן פעולות השוואה, מתבצעות בזמן קבוע על מספרים ממשיים.

על אף כוחו הבלתי רגיל של מודל RAM הממשי, קיימות מספר שפות תכנות המיועדות למימוש אלגוריתמים גאומטריים ומאפשרות סימולציה שלו. הרעיון בסימולציה כזו הוא שרמת הדיוק בחישוב וייצוג המספרים משתנה בהתאם לצרכי האלגוריתם, כך שניתן יהיה לבצע השוואות מדויקות ולהימנע מטעויות עיגול. לדוגמה, [**הספריה CGAL**](https://www.cgal.org/) תומכת בחישובים גאומטריים מדוייקים באמצעות מנגנון מסוג זה.

### **כלים ומקורות נוספים** {.unnumbered}

בדף זה ירוכזו כלים שימושיים לקורס, ומקורות נוספים ללמידה והעשרה.

#### כלים מומלצים לשימוש בקורס {.unnumbered}

-   [**Ipe**](https://ipe.otfried.org/)- כלי חינמי מצוין לציורים גאומטריים שפותח ע"י Otfried Cheong, חוקר בגאומטריה חישובית. מדריך מצוין לכלי זה ניתן למצוא [**כאן**](https://www.youtube.com/watch?v=moM4CATxTgw&ab_channel=V%C3%A1clavBla%C5%BEej).

-   [**Geogebra**](https://www.geogebra.org/geometry)- כלי ליצירת אובייקטים גאומטריים אינטראקטיביים.

-   [**CGAL**](https://www.cgal.org/) - ספריית C++ המכילה מגוון של אלגוריתמים ומבני נתונים גאומטריים.

#### הרצאות מוקלטות וחומרי לימוד נוספים {.unnumbered}

למעוניינים בכך, ניתן למצוא חומרי לימוד מצויינים מקורסים דומים הניתנים ברחבי העולם. הנה רשימה חלקית ביותר של הבולטים שבהם:

-   [**CMSC 754 Computational Geometry**](http://www.cs.umd.edu/class/spring2020/cmsc754/Lects/cmsc754-spring2020-lects.pdf), by David M. Mount.

-   [**Geometry: Combinatorics and Algorithms**](https://geometry.inf.ethz.ch/gca18.pdf), by Luis Barba Bernd Gärtner, Michael Hoffmann and Emo Welzl.

-   [**Computational Geometry**](https://www.youtube.com/@PhilippKindermann/playlists?view=50&sort=dd&shelf_id=2), video lectures by Philipp Kindermann.

## **מושגי יסוד**

### **אובייקטים גאומטריים בסיסיים** {.unnumbered}

בחלק זה מופיעה רשימה של הגדרות בסיסיות איתן נעבוד. גם אם אתם כבר מכירים את כולן או את רובן, מומלץ בכל זאת לקרוא את הפרק כדי לודא שאתם מבינים את הניסוח המתמטי שבו נשתמש בקורס. תוכלו לחזור לפרק זה בכל עת, אם תרצו להיזכר באחת מההגדרות.

#### **מרחב אוקלידי, נקודה, נורמה ומרחק** {.unnumbered}

### **עקומים ופוליגונים** {.unnumbered}

### **פוליגונים מיוחדים** {.unnumbered}

## הקמור של קבוצת נקודות במישור

### **הגדרת הקמור**

הדוגמה הראשונה לבעיה גאומטרית שנלמד בקורס היא בעיית חישוב הקמור. הקמור של קבוצת נקודות הוא מושג בסיסי וחשוב ביותר, מכיוון שיש לו אינספור שימושים בתחומים שונים ומגוונים. בסרטון הבא נגדיר מהו הקמור של קבוצת נקודות, ונציג דוגמה אחת לשימוש בו - דווקא בבעיה שבמבט ראשון אין לה קשר לגאומטריה, ובהמשך נראה איך בכל זאת הגאומטריה תעזור לנו בפתרון הבעיה.

#### צפו בסרטון הבא.

<iframe width="560" height="315" src="https://www.youtube.com/embed/qCTU2jxXfs0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>

#### הגדרה: קבוצה קמורה

קבוצת נקודות S היא קבוצה קמורה אם לכל זוג נקודות p,q∈S מתקיים שהקטע pq מוכל בקבוצה S.

#### הגדרה: הקמור

עבור קבוצת נקודות , הקמור (Convex Hull) של  מסומן .

לקמור של קבוצת נקודות יש מספר הגדרות שקולות:

הקמור של קבוצת נקודות  הוא הקבוצה הקמורה הקטנה ביותר שמכילה את . (כלומר, לא קיימת קבוצה קמורה שמכילה את  ומוכלת ממש בקמור של ).

הקמור של קבוצת נקודות  הוא הפוליגון הקמור היחיד שקודקודיו הם נקודות מ- ושמכיל את .

הקמור של קבוצת נקודות  הוא החיתוך של כל חצאי המרחבים הסגורים שמכילים את .

### **אלגוריתם נאיבי**

בחלק הראשון של סעיף 1.1 בספר הלימוד מופיעות הגדרות הקמור שראינו קודם, וכן מתואר האלגוריתם **SlowConvexHull**, שהוא אלגוריתם נאיבי. סיבוכיות זמן הריצה שלו היא , והיא רחוקה מלהיות אופטימלית, אך הוא אינטואיטיבי ונכונותו נובעת ישירות מהאבחנות שעשינו קודם על התכונות הגאומטריות של הקמור. 

באלגוריתם זה עולה הנושא של **מצבים מנוונים (degeneracies)**, אלו הם למעשה מקרי קצה של הקלט שיש לקחת בחשבון. בנוסף, באלגוריתם עולה גם בעיה של **עמידות החישוב (robustness)**, כלומר במצבים מסוימים של טעויות עיגול בחישובים עם נקודה צפה (floating point), יתכן  שהאלגוריתם אפילו לא יחזיר פוליגון. בחלק הרביעי של יחידה זו תוכלו לקרוא עוד על עמידות החישוב ומצבים מנוונים.

#### קראו את חלקו הראשון של סעיף 1.1 בספר הלימוד (עמודים 2--5)

### **אלגוריתם אינקרמנטלי**

בסרטון הבא נתאר את האלגוריתם **ConvexHull** המופיע בחלקו השני של סעיף 1.1 בספר הלימוד. האלגוריתם הזה נקרא גם **האלגוריתם האינקרמנטלי**, או **סריקת גרהם (Graham Scan)**. הוא מתוחכם יותר, וסיבוכיות זמן הריצה שלו היא  - זמן כמעט לינארי. זהו שיפור משמעותי מאוד לעומת האלגוריתם הנאיבי שראינו בחלק הקודם. 

#### צפו בסרטון הבא:

<iframe width="560" height="315" src="https://www.youtube.com/embed/RgGhwKWO2F4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>

#### קראו את חלקו השני של סעיף 1.1 בספר הלימוד (עמודים 6--8)

### **אלגוריתם רגיש לפלט**

האם ניתן לשפר את זמן הריצה של האלגוריתם האינקרמנטלי שראינו קודם? בסרטון הבא נתאר  אלגוריתם נוסף לחישוב הקמור, שנקרא **אלגוריתם עטיפת המתנה (Gift Wrapping)** או **Jarvis's March**. זמן הריצה שלו הוא, כאשר  הוא מספר קודקודי הקמור. סוג כזה של אלגוריתם נקרא **output sensitive**, כלומר אלגוריתם שזמן הריצה שלו תלוי בגודל הפלט.

#### צפו בסרטון הבא:

<iframe width="560" height="315" src="https://www.youtube.com/embed/6eZmX1bAC_w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>

## **מצבים מנוונים ועמידות החישוב**

על מנת לפשט את התיאור של אלגוריתמים גאומטריים, במקרים רבים משתמשים בהנחה שנקראת **מצב כללי (general position)**. המשמעות היא שהקלט אינו מכיל מצבים "**מנוונים**" **(degenerate)**, למשל, שתי נקודות עם אותה קואורדינטת x, שלוש נקודות על ישר אחד, או ארבע נקודות על מעגל. המטרה היא להימנע מסרבול האלגוריתם כאשר יש צורך בטיפול ב**מקרי קצה**. לדוגמה, באלגוריתם האינקרמטלי לחישוב הקמור (סריקת גרהם), יש למיין את הנקודות לפי קואורדינטת ה-x שלהן. אך מה עושים אם יש שתי נקודות בעלות אותה קואורדינטת x? נצטרך להחליט מי מהן תופיע ראשונה במיון. אמנם כאן נוכל להוסיף תיאור פשוט יחסית, אך יותר קל להניח שהקלט נמצא במצב כללי, כלומר נניח שאין שתי נקודות בעלות אותה קואורדינטת x. הנחות מסוג זה הן מקובלות באלגוריתמים גאומטריים, ומשתנות בהתאם לצרכי האלגוריתם.

מצבים מנוונים קשורים בנושא **עמידות החישוב (robustness)**, מכיוון שלעיתים הטיפול בהם כרוך בבדיקה הגוררת חישוב שתוצאתו היא אפס. לדוגמה, במימוש אלגוריתם האינקרמנטלי, אנו נדרשים לבדוק האם שלושת הנקודות האחרונות יוצרות פניה ימינה. כלומר, בהינתן שלוש נקודות, , נרצה לבדוק האם הזוית שהן יוצרות, כלומר הזוית , קטנה מ-. ניתן לעשות זאת על ידי חישוב של הישר העובר דרך  ובדיקה האם  נמצאת מעליו או מתחתיו, או על ידי מכפלה וקטורית כפי שנראה בפרק הבא. אם שלושת הנקודות נמצאות על ישר אחד, נקבל שיוויון, כלומר . כאשר מבצעים חישוב של מספרים ממשיים במחשב, התוצאה תלויה ברמת הדיוק של המחשב, אשר אינה אינסופית, ולכן בדרך כלל לא נקבל מצב של שיוויון מדויק. לכן, אם שלושת הנקודות נמצאות כמעט על אותו ישר, אי דיוק מזערי בחישוב עלול להביא לתוצאה שגויה, מה שמעלה את השאלה של נכונות האלגוריתם במצבים כגון זה, וזוהי בעצם השאלה של עמידות החישוב.

#### קראו את סעיף 1.2 בספר (עמודים 8--10)